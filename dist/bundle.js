!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],t):"object"==typeof exports?exports.bundle=t(require("phaser")):e.bundle=t(e.phaser)}(window,(function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,i=n;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:r.GameScene};t.game=new Phaser.Game(i),window.addEventListener("resize",(function(){t.game.scale.refresh()}))},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),s={active:!0,visible:!0,key:"GameScene"},a=function(e){function t(){var t=e.call(this,s)||this;return t.isPaused=!1,t}return i(t,e),t.prototype.preload=function(){},t.prototype.create=function(){var e=this;this.inputKeys=this.input.keyboard.createCursorKeys();var t={scene:this,x:200,y:200,texture:"./assets/sprites/ship-pod.png",frame:0};this.player=new o.ShipPod(t),this.input.on("pointermove",(function(t){e.mouseLocation=new Phaser.Math.Vector2(t.x,t.y)})),this.input.on("KEY_DOWN_P",(function(t){e.isPaused=!0})),this.input.on("KEY_DOWN_R",(function(){e.isPaused=!1}))},t.prototype.update=function(){this.isPaused||this.player.update()},t}(Phaser.Scene);t.GameScene=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5);n(9);var i=function(){function e(e){this.active=!0,this.fuelCapacity=100,this.remainingFuel=100,this.thrusterForce=1,this.thrusterFuelConsumption=.01,this.thrusterHeatGeneration=.5,this.rotationRate=.2,this.integrity=100,this.temperature=0,this.realPosition=Phaser.Math.Vector2.ZERO,this.config=e,this.id=r.RNG.guid(),this.gameObj=this.config.scene.physics.add.sprite(this.config.scene.game.scale.width/2,this.config.scene.game.scale.height/2,"ship-pod")}return e.prototype.update=function(){this.lookAt(this.config.scene.mouseLocation),this.config.scene.inputKeys.space.isDown&&this.activateThruster(),this.applyCooling(),this.integrityCheck()},e.prototype.getId=function(){return this.id},e.prototype.lookAt=function(e){if(e){var t=Phaser.Math.Angle.Between(e.x,e.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(t)}},e.prototype.activateThruster=function(){if(this.remainingFuel>0){var e=this.config.scene.mouseLocation.subtract(new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)).normalize().multiply(new Phaser.Math.Vector2(this.thrusterForce,this.thrusterForce)),t=this.gameObj.body.velocity;console.log("current velocity: "+JSON.stringify(t));var n=t.add(e);this.gameObj.setVelocity(n.x,n.y),this.remainingFuel-=this.thrusterFuelConsumption,this.applyHeating(this.thrusterHeatGeneration)}},e.prototype.applyHeating=function(e){if(this.temperature+=e,this.temperature>100){var t=this.temperature-100;this.integrity-=t}},e.prototype.applyCooling=function(){this.temperature>0&&(this.temperature-=.1),this.temperature<0&&(this.temperature=0)},e.prototype.integrityCheck=function(){this.integrity<=0&&(this.active=!1)},e}();t.ShipPod=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6);!function(e){e.int=function(e,t){return Math.floor(Math.random()*(t-e+1))+e},e.guid=function(){return r.v4()}}(t.RNG||(t.RNG={}))},function(e,t,n){var r=n(7),i=n(8),o=i;o.v1=r,o.v4=i,e.exports=o},function(e,t,n){var r,i,o=n(0),s=n(1),a=0,u=0;e.exports=function(e,t,n){var c=t&&n||0,p=t||[],f=(e=e||{}).node||r,h=void 0!==e.clockseq?e.clockseq:i;if(null==f||null==h){var l=o();null==f&&(f=r=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==h&&(h=i=16383&(l[6]<<8|l[7]))}var d=void 0!==e.msecs?e.msecs:(new Date).getTime(),y=void 0!==e.nsecs?e.nsecs:u+1,v=d-a+(y-u)/1e4;if(v<0&&void 0===e.clockseq&&(h=h+1&16383),(v<0||d>a)&&void 0===e.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,u=y,i=h;var m=(1e4*(268435455&(d+=122192928e5))+y)%4294967296;p[c++]=m>>>24&255,p[c++]=m>>>16&255,p[c++]=m>>>8&255,p[c++]=255&m;var g=d/4294967296*1e4&268435455;p[c++]=g>>>8&255,p[c++]=255&g,p[c++]=g>>>24&15|16,p[c++]=g>>>16&255,p[c++]=h>>>8|128,p[c++]=255&h;for(var b=0;b<6;++b)p[c+b]=f[b];return t||s(p)}},function(e,t,n){var r=n(0),i=n(1);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},function(t,n){t.exports=e}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,