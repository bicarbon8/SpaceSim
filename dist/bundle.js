!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var o=new Uint8Array(16);t.exports=function(){return n(o),o}}else{var r=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),r[e]=t>>>((3&e)<<3)&255;return r}}},function(t,e){for(var n=[],o=0;o<256;++o)n[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,r=n;return[r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],"-",r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]],r[t[o++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:o.GameScene};e.game=new Phaser.Game(r),window.addEventListener("resize",(function(){e.game.scale.refresh()}))},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(4),s=n(11),a={active:!0,visible:!0,key:"GameScene"},u=function(t){function e(){return t.call(this,a)||this}return r(e,t),e.prototype.preload=function(){},e.prototype.create=function(){var t={scene:this,x:200,y:200,texture:"./assets/sprites/ship-pod.png",frame:0};s.Globals.player=new i.ShipPod(t),this.followPlayer(),this.input.on("KEY_DOWN_P",(function(t){s.Globals.isPaused=!0})),this.input.on("KEY_DOWN_R",(function(){s.Globals.isPaused=!1}))},e.prototype.update=function(){s.Globals.isPaused||s.Globals.player.update()},e.prototype.followPlayer=function(){this.cameras.main.startFollow(s.Globals.player.getGameObject(),!1,.5,.1)},e}(Phaser.Scene);e.GameScene=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(5);n(9);var r=n(10),i=function(){function t(t){this.active=!0,this.fuelCapacity=100,this.remainingFuel=100,this.thrusterForce=1,this.thrusterFuelConsumption=.01,this.thrusterHeatGeneration=.5,this.rotationRate=.2,this.integrity=100,this.temperature=0,this.config=t,this.id=o.RNG.guid(),this.gameObj=this.config.scene.physics.add.sprite(this.config.scene.game.scale.width/2,this.config.scene.game.scale.height/2,"ship-pod"),this.setTarget(new r.Mouse(this.config.scene)),this.inputKeys=this.config.scene.input.keyboard.createCursorKeys()}return t.prototype.update=function(){this.lookAtTarget(),this.inputKeys.space.isDown&&this.thrustFowards(),this.applyCooling(),this.integrityCheck()},t.prototype.getRealPosition=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.getPosition=function(){var t=this.config.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.setTarget=function(t){this.target=t},t.prototype.lookAtTarget=function(){var t=this.target.getRealPosition(),e=Phaser.Math.Angle.Between(t.x,t.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(e)},t.prototype.thrustFowards=function(){if(this.remainingFuel>0){var t=new Phaser.Math.Vector2(Math.cos(Phaser.Math.Angle.CounterClockwise(this.gameObj.rotation)),Math.sin(Phaser.Math.Angle.CounterClockwise(this.gameObj.rotation))).clone().normalize().clone().multiply(new Phaser.Math.Vector2(this.thrusterForce,this.thrusterForce)),e=this.gameObj.body.velocity.add(t);this.gameObj.setVelocity(e.x,e.y),this.remainingFuel-=this.thrusterFuelConsumption,this.applyHeating(this.thrusterHeatGeneration)}},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.applyHeating=function(t){if(this.temperature+=t,this.temperature>100){var e=this.temperature-100;this.integrity-=e}},t.prototype.applyCooling=function(){this.temperature>0&&(this.temperature-=.1),this.temperature<0&&(this.temperature=0)},t.prototype.integrityCheck=function(){this.integrity<=0&&(this.active=!1)},t}();e.ShipPod=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(6);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var o=n(7),r=n(8),i=r;i.v1=o,i.v4=r,t.exports=i},function(t,e,n){var o,r,i=n(0),s=n(1),a=0,u=0;t.exports=function(t,e,n){var c=e&&n||0,p=e||[],l=(t=t||{}).node||o,h=void 0!==t.clockseq?t.clockseq:r;if(null==l||null==h){var f=i();null==l&&(l=o=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==h&&(h=r=16383&(f[6]<<8|f[7]))}var y=void 0!==t.msecs?t.msecs:(new Date).getTime(),d=void 0!==t.nsecs?t.nsecs:u+1,g=y-a+(d-u)/1e4;if(g<0&&void 0===t.clockseq&&(h=h+1&16383),(g<0||y>a)&&void 0===t.nsecs&&(d=0),d>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=y,u=d,r=h;var m=(1e4*(268435455&(y+=122192928e5))+d)%4294967296;p[c++]=m>>>24&255,p[c++]=m>>>16&255,p[c++]=m>>>8&255,p[c++]=255&m;var v=y/4294967296*1e4&268435455;p[c++]=v>>>8&255,p[c++]=255&v,p[c++]=v>>>24&15|16,p[c++]=v>>>16&255,p[c++]=h>>>8|128,p[c++]=255&h;for(var b=0;b<6;++b)p[c+b]=l[b];return e||s(p)}},function(t,e,n){var o=n(0),r=n(1);t.exports=function(t,e,n){var i=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||o)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var a=0;a<16;++a)e[i+a]=s[a];return e||r(s)}},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){var e=this;this.scene=t,this.location=Phaser.Math.Vector2.ZERO,this.scene.input.on("pointermove",(function(t){e.location=new Phaser.Math.Vector2(t.x,t.y)}))}return t.prototype.getPosition=function(){return console.log("mouse location: "+JSON.stringify(this.location)),this.location.clone()},t.prototype.getRealPosition=function(){var t=this.scene.cameras.main.getWorldPoint(this.location.x,this.location.y);return console.log("mouse REAL location: "+JSON.stringify(t)),t},t}();e.Mouse=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Globals||(e.Globals={})}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,