!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.enumLength=function(t){var e=0;for(var n in t)isNaN(Number(n))&&e++;return e},t.getHeading=function(t){var e=Math.cos(Phaser.Math.DegToRad(t)),n=Math.sin(Phaser.Math.DegToRad(t));return new Phaser.Math.Vector2(e,n).normalize().negate()},t.vector2=function(t,e){return e||(e=t),new Phaser.Math.Vector2(t,e)}}(e.Helpers||(e.Helpers={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.front=0]="front",t[t.frontRight=1]="frontRight",t[t.right=2]="right",t[t.backRight=3]="backRight",t[t.back=4]="back",t[t.backLeft=5]="backLeft",t[t.left=6]="left",t[t.frontLeft=7]="frontLeft"}(e.AttachmentLocation||(e.AttachmentLocation={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.interactables=[],t.debug=!1}(e.Globals||(e.Globals={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MAX_INTEGRITY=100,t.MAX_FUEL=100,t.MAX_SAFE_TEMPERATURE=100,t.MAX_TEMPERATURE=200,t.MAX_VELOCITY=500,t.OVERHEAT_CHECK_INTERVAL=100,t.COOLING_RATE=.3,t.THRUSTER_FORCE=1,t.FUEL_PER_THRUST=.001,t.HEAT_PER_THRUST=.1,t.BOOSTER_FORCE=300,t.FUEL_PER_BOOST=1,t.HEAT_PER_BOOST=25,t.BOOSTER_COOLDOWN_TIME=1e3,t.THROW_FORCE=100,function(t){t[t.blue=0]="blue",t[t.green=1]="green",t[t.red=2]="red",t[t.white=3]="white",t[t.yellow=4]="yellow"}(t.Flare||(t.Flare={}))}(e.Constants||(e.Constants={}))},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var i=new Uint8Array(16);t.exports=function(){return n(i),i}}else{var o=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}},function(t,e){for(var n=[],i=0;i<256;++i)n[i]=(i+256).toString(16).substr(1);t.exports=function(t,e){var i=e||0,o=n;return[o[t[i++]],o[t[i++]],o[t[i++]],o[t[i++]],"-",o[t[i++]],o[t[i++]],"-",o[t[i++]],o[t[i++]],"-",o[t[i++]],o[t[i++]],"-",o[t[i++]],o[t[i++]],o[t[i++]],o[t[i++]],o[t[i++]],o[t[i++]]].join("")}},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(3),s=function(t){function e(e){var n=t.call(this,e)||this;return n.lastBoostTime=0,n.scene=e,n.flareParticles=e.add.particles("flares"),n.gameObj=n.scene.add.sprite(0,0,"thruster"),n.scene.physics.add.existing(n.gameObj),n}return o(e,t),e.prototype.update=function(){},e.prototype.trigger=function(){this.active&&this.thrustFowards()},e.prototype.thrustFowards=function(){this.applyThrust(a.Constants.THRUSTER_FORCE,a.Constants.FUEL_PER_THRUST,a.Constants.HEAT_PER_THRUST),this.displayThrusterFire(a.Constants.Flare.yellow,.2,1)},e.prototype.boostForwards=function(){this.scene.game.getTime()>=this.lastBoostTime+a.Constants.BOOSTER_COOLDOWN_TIME&&(this.applyThrust(a.Constants.BOOSTER_FORCE,a.Constants.FUEL_PER_BOOST,a.Constants.HEAT_PER_BOOST),this.displayThrusterFire(a.Constants.Flare.blue,1,10),this.lastBoostTime=this.scene.game.getTime())},e.prototype.strafeLeft=function(){},e.prototype.strafeRight=function(){},e.prototype.thrustBackwards=function(){},e.prototype.applyThrust=function(t,e,n){if(this.ship.getRemainingFuel()>0){var i=this.ship.getHeading().multiply(new Phaser.Math.Vector2(t,t));this.ship.getPhysicsBody().velocity.add(i),this.ship.reduceFuel(e),this.ship.applyHeating(n)}},e.prototype.displayThrusterFire=function(t,e,n){var i=this.ship.getRealLocation(),o=new Phaser.Math.Vector2(20,0).add(i),a=this.ship.getHeading().negate(),s=Phaser.Math.RotateAround(o,i.x,i.y,Phaser.Math.DegToRad(this.ship.getRotation())),r=this.ship.getVelocity();this.flareParticles.createEmitter({frame:t,x:s.x,y:s.y,lifespan:{min:250,max:500},speedX:{min:100*a.x+r.x,max:500*a.x+r.x},speedY:{min:100*a.y+r.y,max:500*a.y+r.y},angle:0,gravityX:0,gravityY:0,scale:{start:e,end:0},quantity:n,blendMode:"ADD",maxParticles:1})},e}(n(7).ShipAttachment);e.ThrusterAttachment=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),o=n(1),a=n(0),s=function(){function t(t){this.scene=t,this.active=!0,this.integrity=i.Constants.MAX_INTEGRITY,this.isThrown=!1}return t.prototype.attach=function(t,e){void 0===e&&(e=o.AttachmentLocation.front),this.ship=t,this.setAttachmentLocation(e);var n=this.ship.getRealLocation();this.getPhysicsBody().position=n,this.getPhysicsBody().rotation=this.ship.getRotation()},t.prototype.detach=function(){this.ship=null,this.attachmentLocation=null;var t=this.getGameObject();t.setActive(!0),this.scene.add.existing(t)},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getPhysicsBody=function(){var t=this.getGameObject();return t?t.body:null},t.prototype.getRotation=function(){var t=this.getGameObject().angle;return this.ship&&(t+=this.ship.getRotation()),t},t.prototype.getHeading=function(){var t=this.getRotation();return a.Helpers.getHeading(t)},t.prototype.getSpeed=function(){var t=this.getVelocity().length();return this.ship&&(t+=this.ship.getSpeed()),t},t.prototype.getVelocity=function(){if(this.getPhysicsBody()){var t=this.getPhysicsBody().velocity.clone();return this.ship&&t.add(this.ship.getVelocity()),t}return Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getRealLocation();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getRealLocation=function(){var t=this.getGameObject();if(t){var e=new Phaser.Math.Vector2(t.x,t.y);return this.ship&&e.add(this.ship.getRealLocation()),e}return Phaser.Math.Vector2.ZERO},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>i.Constants.MAX_INTEGRITY&&(this.integrity=i.Constants.MAX_INTEGRITY)},t.prototype.destroy=function(){this.active=!1,this.ship.attachments.removeAttachment(this.attachmentLocation),this.getGameObject().destroy()},t.prototype.setAttachmentLocation=function(t){this.attachmentLocation=t},t}();e.ShipAttachment=s},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.reload=function(t){this.remainingAmmo+=t,this.remainingAmmo>this.maxAmmo&&(this.remainingAmmo=this.maxAmmo)},e.prototype.getRemainingAmmo=function(){return this.remainingAmmo},e.prototype.trigger=function(){this.active&&this.fire()},e}(n(7).ShipAttachment);e.OffenceAttachment=a},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(21),s=function(t){function e(e,n){var i=t.call(this,n)||this;return i.increment=e,i.minZoom=1-2*e,i.maxZoom=1,i}return o(e,t),e.prototype.create=function(){var t=this;this.mouse=new a.Mouse(this),this.mouse.onWheelUp((function(e){var n=t.cameras.main.zoom-t.increment;n<t.minZoom&&(n=t.minZoom),t.cameras.main.zoomTo(n)})),this.mouse.onWheelDown((function(e){var n=t.cameras.main.zoom+t.increment;n>t.maxZoom&&(n=t.maxZoom),t.cameras.main.zoomTo(n)}))},e}(Phaser.Scene);e.ZoomableScene=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(11),o=n(2),a=n(22),s=n(23),r=n(24),c={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:[s.FarStarsScene,r.SystemScene,i.ShipScene,a.OverlayScene]};e.game=new Phaser.Game(c),window.addEventListener("resize",(function(){e.game.scale.refresh()})),o.Globals.game=e.game,o.Globals.debug=!0},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(12),s=n(2),r=n(19),c=n(9),h=n(1),u=n(6),p=n(0),l=n(8),y={active:!0,visible:!0,key:"ShipScene"},m=function(t){function e(){return t.call(this,.4,y)||this}return o(e,t),e.prototype.preload=function(){this.load.image("ship-pod","./assets/sprites/ship-pod.png"),this.load.image("thruster","./assets/sprites/thruster.png"),this.load.image("cannon","./assets/sprites/cannon.png"),this.load.spritesheet("flares","./assets/particles/flares.png",{frameWidth:130,frameHeight:132,startFrame:0,endFrame:4}),this.load.image("explosion","./assets/particles/explosion.png"),this.load.image("bullet","./assets/sprites/bullet.png")},e.prototype.create=function(){t.prototype.create.call(this),this.player=new a.ShipPod(this,{x:0,y:0}),s.Globals.player=this.player,this.player.setTarget(this.mouse);var e=new u.ThrusterAttachment(this);this.player.attachments.addAttachment(e);var n=new r.CannonAttachment(this);this.player.attachments.addAttachment(n),this.setupCamera(this.player),this.setupInputHandling()},e.prototype.update=function(){var t;this.thrustKey.isDown&&((t=this.player.getThruster())&&t.thrustFowards());this.boostKey.isDown&&((t=this.player.getThruster())&&t.boostForwards());if(this.input.activePointer.leftButtonDown())for(var e=0;e<p.Helpers.enumLength(h.AttachmentLocation);e++){var n;if(this.player.attachments.getAttachment(e)instanceof l.OffenceAttachment)(n=this.player.attachments.getAttachment(e)).trigger()}this.input.activePointer.rightButtonDown()&&((n=this.player.attachments.getAttachment(h.AttachmentLocation.front))&&n.trigger());this.rotateAttachmentsClockwiseKey.isDown&&this.player.attachments.rotateAttachmentsClockwise(),this.rotateAttachmentsAntiClockwiseKey.isDown&&this.player.attachments.rotateAttachmentsAntiClockwise(),this.detachAttachmentKey.isDown&&this.player.attachments.removeAttachment(h.AttachmentLocation.front),this.throwAttachmentKey.isDown&&this.player.attachments.throwAttachment(h.AttachmentLocation.front),this.grabAttachmentKey.isDown,this.player.update()},e.prototype.setupInputHandling=function(){this.thrustKey=this.input.keyboard.addKey("SPACE",!0,!0),this.boostKey=this.input.keyboard.addKey("TAB",!0,!1),this.rotateAttachmentsClockwiseKey=this.input.keyboard.addKey("E",!0,!1),this.rotateAttachmentsAntiClockwiseKey=this.input.keyboard.addKey("Q",!0,!1),this.detachAttachmentKey=this.input.keyboard.addKey("X",!0,!1),this.throwAttachmentKey=this.input.keyboard.addKey("T",!0,!1),this.grabAttachmentKey=this.input.keyboard.addKey("G",!0,!1),this.game.canvas.oncontextmenu=function(t){t.preventDefault()}},e.prototype.setupCamera=function(t){this.cameras.main.backgroundColor.setFromRGB({r:0,g:0,b:0}),this.cameras.main.setZoom(1);var e=t.getRealLocation();this.cameras.main.centerOn(e.x,e.y),this.cameras.main.startFollow(t.getGameObject(),!0,1,1)},e}(c.ZoomableScene);e.ShipScene=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(13);var i=n(14),o=n(3),a=n(0),s=n(18),r=n(1),c=function(){function t(t,e){this.remainingFuel=100,this.temperature=0,this.active=!0,this.lastOverheatCheck=0,e||(e={x:0,y:0}),this.id=i.RNG.guid(),this.scene=t,this.containerGameObj=t.add.container(e.x,e.y),this.flareParticles=t.add.particles("flares"),this.explosionParticles=t.add.particles("explosion");var n=t.add.sprite(0,0,"ship-pod");this.getGameObject().add(n),this.scene.physics.add.existing(this.containerGameObj),this.getPhysicsBody().bounce.setTo(.7,.7),this.getPhysicsBody().setMaxVelocity(o.Constants.MAX_VELOCITY,o.Constants.MAX_VELOCITY),this.integrity=o.Constants.MAX_INTEGRITY,this.attachments=new s.AttachmentManager(this,this.scene)}return t.prototype.getThruster=function(){return this.attachments.getAttachment(r.AttachmentLocation.back)},t.prototype.update=function(){this.active&&(this.lookAtTarget(),this.checkOverheatCondition(),this.attachments.update())},t.prototype.checkOverheatCondition=function(){if(this.active&&this.scene.game.getTime()>this.lastOverheatCheck+o.Constants.OVERHEAT_CHECK_INTERVAL){if(this.temperature>o.Constants.MAX_TEMPERATURE&&this.destroy(),this.temperature>o.Constants.MAX_SAFE_TEMPERATURE){var t=(this.temperature-o.Constants.MAX_SAFE_TEMPERATURE)/o.Constants.MAX_SAFE_TEMPERATURE;this.sustainDamage(t)}this.applyCooling(o.Constants.COOLING_RATE),this.lastOverheatCheck=this.scene.game.getTime()}},t.prototype.getRealLocation=function(){var t=this.getGameObject();return t?new Phaser.Math.Vector2(t.x,t.y):Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getRealLocation();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.containerGameObj},t.prototype.getPhysicsBody=function(){var t=this.getGameObject();return t?t.body:null},t.prototype.setTarget=function(t){this.target=t},t.prototype.getTarget=function(){return this.target},t.prototype.lookAtTarget=function(){if(this.getPhysicsBody()&&this.getTarget()){var t=this.getTarget().getRealLocation(),e=this.getRealLocation(),n=Phaser.Math.Angle.Between(t.x,t.y,e.x,e.y),i=Phaser.Math.RadToDeg(n);this.getPhysicsBody().rotation=i}},t.prototype.getRotation=function(){return this.getGameObject()?this.getGameObject().angle:0},t.prototype.getHeading=function(){return a.Helpers.getHeading(this.getRotation())},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.getPhysicsBody()?this.getPhysicsBody().velocity.clone():Phaser.Math.Vector2.ZERO},t.prototype.getTemperature=function(){return this.temperature},t.prototype.applyHeating=function(t){this.temperature+=t},t.prototype.applyCooling=function(t){this.temperature-=t,this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.addFuel=function(t){this.remainingFuel+=t,this.remainingFuel>o.Constants.MAX_FUEL&&(this.remainingFuel=o.Constants.MAX_FUEL)},t.prototype.getRemainingFuel=function(){return this.remainingFuel},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>o.Constants.MAX_INTEGRITY&&(this.integrity=o.Constants.MAX_INTEGRITY)},t.prototype.destroy=function(){this.active=!1,this.displayShipExplosion(),this.getGameObject().destroy(),this.containerGameObj=null},t.prototype.displayShipExplosion=function(){var t=this.getRealLocation();this.explosionParticles.createEmitter({x:t.x,y:t.y,lifespan:{min:500,max:1e3},speedX:{min:-1,max:1},speedY:{min:-1,max:1},angle:{min:-180,max:179},gravityX:0,gravityY:0,scale:{start:1,end:0},blendMode:"ADD",maxParticles:3}),this.flareParticles.createEmitter({frame:o.Constants.Flare.red,x:t.x,y:t.y,lifespan:{min:100,max:500},speedX:{min:-600,max:600},speedY:{min:-600,max:600},angle:{min:-180,max:179},gravityX:0,gravityY:0,scale:{start:1,end:0},blendMode:"ADD",maxParticles:10})},t}();e.ShipPod=c},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(15);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return i.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var i=n(16),o=n(17),a=o;a.v1=i,a.v4=o,t.exports=a},function(t,e,n){var i,o,a=n(4),s=n(5),r=0,c=0;t.exports=function(t,e,n){var h=e&&n||0,u=e||[],p=(t=t||{}).node||i,l=void 0!==t.clockseq?t.clockseq:o;if(null==p||null==l){var y=a();null==p&&(p=i=[1|y[0],y[1],y[2],y[3],y[4],y[5]]),null==l&&(l=o=16383&(y[6]<<8|y[7]))}var m=void 0!==t.msecs?t.msecs:(new Date).getTime(),f=void 0!==t.nsecs?t.nsecs:c+1,g=m-r+(f-c)/1e4;if(g<0&&void 0===t.clockseq&&(l=l+1&16383),(g<0||m>r)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");r=m,c=f,o=l;var d=(1e4*(268435455&(m+=122192928e5))+f)%4294967296;u[h++]=d>>>24&255,u[h++]=d>>>16&255,u[h++]=d>>>8&255,u[h++]=255&d;var v=m/4294967296*1e4&268435455;u[h++]=v>>>8&255,u[h++]=255&v,u[h++]=v>>>24&15|16,u[h++]=v>>>16&255,u[h++]=l>>>8|128,u[h++]=255&l;for(var b=0;b<6;++b)u[h+b]=p[b];return e||s(u)}},function(t,e,n){var i=n(4),o=n(5);t.exports=function(t,e,n){var a=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||i)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var r=0;r<16;++r)e[a+r]=s[r];return e||o(s)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=n(1),a=n(6),s=n(3),r=function(){function t(t,e){this.attachments=[],this.active=!0,this.ship=t,this.scene=e,this.lastRotatedTime=0,this.rotationDelay=100;for(var n=0;n<i.Helpers.enumLength(o.AttachmentLocation);n++)this.attachments.push(null)}return t.prototype.update=function(){if(this.active)for(var t=0;t<this.attachments.length;t++){var e=this.attachments[t];e&&e.update()}},t.prototype.rotateAttachmentsClockwise=function(){if(this.scene.game.getTime()>this.lastRotatedTime+this.rotationDelay){for(var t=this.getAttachment(i.Helpers.enumLength(o.AttachmentLocation)-1),e=i.Helpers.enumLength(o.AttachmentLocation)-1;e>=0;e--)e!=o.AttachmentLocation.back&&(e!=o.AttachmentLocation.backLeft?this.attachments[e]=this.attachments[e-1]:this.attachments[e]=this.attachments[e-2]);this.attachments[0]=t,this.updateAttachmentAngles(),this.lastRotatedTime=this.scene.game.getTime()}},t.prototype.rotateAttachmentsAntiClockwise=function(){if(this.scene.game.getTime()>this.lastRotatedTime+this.rotationDelay){for(var t=this.getAttachment(0),e=0;e<i.Helpers.enumLength(o.AttachmentLocation);e++)e!=o.AttachmentLocation.back&&(e!=o.AttachmentLocation.backRight?this.attachments[e]=this.attachments[e+1]:this.attachments[e]=this.attachments[e+2]);this.attachments[i.Helpers.enumLength(o.AttachmentLocation)-1]=t,this.updateAttachmentAngles(),this.lastRotatedTime=this.scene.game.getTime()}},t.prototype.addAttachment=function(t){if(t instanceof a.ThrusterAttachment)this.removeAttachment(o.AttachmentLocation.back),this.attachments[o.AttachmentLocation.back]=t,t.attach(this.ship,o.AttachmentLocation.back);else{for(var e=!1,n=0;n<i.Helpers.enumLength(o.AttachmentLocation);n++)if(!this.attachments[n]){this.attachments[n]=t,t.attach(this.ship,n),e=!0;break}e||(this.removeAttachment(o.AttachmentLocation.front),this.attachments[o.AttachmentLocation.front]=t,t.attach(this.ship,o.AttachmentLocation.front))}this.ship.getGameObject().add(t.getGameObject()),this.updateAttachmentAngles()},t.prototype.removeAttachment=function(t){if(this.attachments[t]){var e=this.attachments[t];this.attachments[t]=null,this.ship.getGameObject().remove(e.getGameObject(),!1),e.detach();var n=this.ship.getRealLocation();e.getGameObject().setPosition(n.x,n.y);var i=this.ship.getVelocity();e.getPhysicsBody().velocity=i,e.getPhysicsBody().rotation+=this.ship.getRotation()}},t.prototype.throwAttachment=function(t){var e=this.getAttachment(t);if(e){this.removeAttachment(t),e.isThrown=!0;var n=e.getHeading().multiply(new Phaser.Math.Vector2(s.Constants.THROW_FORCE,s.Constants.THROW_FORCE));e.getPhysicsBody().velocity.add(n)}},t.prototype.getAttachments=function(){return this.attachments},t.prototype.getAttachment=function(t){return this.attachments[t]},t.prototype.updateAttachmentAngles=function(){for(var t=0;t<this.attachments.length;t++){var e=this.attachments[t];if(e){var n=0;switch(t){case o.AttachmentLocation.frontRight:n=45;break;case o.AttachmentLocation.right:n=90;break;case o.AttachmentLocation.backRight:n=135;break;case o.AttachmentLocation.back:n=180;break;case o.AttachmentLocation.backLeft:n=225;break;case o.AttachmentLocation.left:n=270;break;case o.AttachmentLocation.frontLeft:n=315;break;default:n=0}e.getGameObject().angle=n}}},t}();e.AttachmentManager=r},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(20),s=function(t){function e(e){var n=t.call(this,e)||this;return n.maxAmmo=500,n.remainingAmmo=n.maxAmmo,n.lastFired=0,n.firingDelay=1e3,n.gameObj=n.scene.add.sprite(0,0,"cannon"),n.scene.physics.add.existing(n.gameObj),n}return o(e,t),e.prototype.update=function(){},e.prototype.fire=function(t){if(this.active&&this.getRemainingAmmo()>0&&this.scene.game.getTime()>this.lastFired+this.firingDelay){var e=new Phaser.Math.Vector2(-20,0).add(this.getRealLocation()),n=this.ship.getRealLocation(),i=Phaser.Math.RotateAround(e,n.x,n.y,Phaser.Math.DegToRad(this.getRotation()));new a.Bullet(this.scene,{x:i.x,y:i.y,force:3e3,angle:this.getRotation(),startingV:this.getVelocity()}),this.lastFired=this.scene.game.getTime()}},e}(n(8).OffenceAttachment);e.CannonAttachment=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(0),a=function(){function t(t,e){this.active=!0,this.scene=t,this.force=e.force||0,this.gameObj=this.scene.add.sprite(e.x||0,e.y||0,"bullet"),this.scene.physics.add.existing(this.gameObj),this.getGameObject().angle=e.angle||0,this.getPhysicsBody().velocity=e.startingV||Phaser.Math.Vector2.ZERO,this.addCollisionDetection(),this.setInMotion()}return t.prototype.addCollisionDetection=function(){for(var t=0;t<i.Globals.interactables.length;t++)this.scene.physics.add.collider(this.gameObj,i.Globals.interactables[t],this.onImpact)},t.prototype.onImpact=function(t,e){},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getPhysicsBody=function(){if(this.getGameObject())return this.getGameObject().body},t.prototype.getRotation=function(){return this.getGameObject().angle},t.prototype.getHeading=function(){return o.Helpers.getHeading(this.getRotation())},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.getPhysicsBody()?this.getPhysicsBody().velocity.clone():Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getRealLocation();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getRealLocation=function(){return this.getGameObject()?new Phaser.Math.Vector2(this.getGameObject().x,this.getGameObject().y):Phaser.Math.Vector2.ZERO},t.prototype.setInMotion=function(){var t=this.getHeading().multiply(o.Helpers.vector2(this.force));this.getPhysicsBody().velocity.add(t)},t}();e.Bullet=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.scene=t,this.scene.input.mouse.capture=!0}return t.prototype.getAngle=function(){return this.scene.input.activePointer.getAngle()},t.prototype.getRotation=function(){return this.getAngle()*(Math.PI/180)},t.prototype.getHeading=function(){var t=this.getAngle(),e=Math.cos(t),n=Math.sin(t);return new Phaser.Math.Vector2(e,n).normalize().negate()},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.scene.input.activePointer.velocity.clone()},t.prototype.getLocation=function(){return this.scene.input.activePointer.position.clone()},t.prototype.getRealLocation=function(){return this.scene.input.activePointer.positionToCamera(this.scene.cameras.main)},t.prototype.onWheelUp=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,i,o,a,s){o>0&&t(o)}))},t.prototype.onWheelDown=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,i,o,a,s){o<0&&t(-o)}))},t}();e.Mouse=i},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(2),s=n(1),r={active:!0,visible:!0,key:"OverlayScene"},c=function(t){function e(){return t.call(this,r)||this}return o(e,t),e.prototype.preload=function(){},e.prototype.create=function(){this.shipDebug=this.add.text(10,10,"",{font:"16px Courier",fill:"#ffdddd"})},e.prototype.update=function(){a.Globals.debug&&this.displayDebugInfo()},e.prototype.displayDebugInfo=function(){if(a.Globals.player){for(var t=a.Globals.player,e=t.getRealLocation(),n=t.getVelocity(),i=["Speed: "+t.getSpeed().toFixed(1),"Integrity: "+t.getIntegrity().toFixed(1),"Heat: "+t.getTemperature().toFixed(1),"Fuel: "+t.getRemainingFuel().toFixed(1),"Location: "+e.x.toFixed(1)+","+e.y.toFixed(1),"Angle: "+t.getRotation().toFixed(1),"Velocity: "+n.x.toFixed(1)+","+n.y.toFixed(1)],o=t.attachments.getAttachments(),r=0;r<o.length;r++)if(o[r]){i.push("AttachmentLocation."+s.AttachmentLocation[r]+" - "+r);var c=o[r].getRealLocation();i.push("-- Location: "+c.x.toFixed(1)+","+c.y.toFixed(1)),i.push("-- Angle: "+o[r].getRotation().toFixed(1))}this.shipDebug.setText(i)}},e}(Phaser.Scene);e.OverlayScene=c},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a={active:!0,visible:!0,key:"FarStars"},s=function(t){function e(){return t.call(this,a)||this}return o(e,t),e.prototype.preload=function(){this.load.image("far-stars","./assets/backgrounds/starfield-tile-512x512.png")},e.prototype.create=function(){var t=Math.ceil(this.game.canvas.width/2),e=Math.ceil(this.game.canvas.height/2);this.add.tileSprite(t,e,this.game.canvas.width+10,this.game.canvas.height+10,"far-stars")},e.prototype.update=function(){},e}(Phaser.Scene);e.FarStarsScene=s},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(9),s=n(2),r={active:!0,visible:!0,key:"SystemScene"},c=function(t){function e(){return t.call(this,.05,r)||this}return o(e,t),e.prototype.preload=function(){this.load.image("sun","./assets/backgrounds/sun.png")},e.prototype.create=function(){t.prototype.create.call(this),this.startPosition=new Phaser.Math.Vector2(Phaser.Math.RND.between(0,this.game.canvas.width),Phaser.Math.RND.between(0,this.game.canvas.height)),this.sun=this.add.sprite(this.startPosition.x,this.startPosition.y,"sun")},e.prototype.update=function(){if(this.sun.angle+=.01,this.sun.angle>=360&&(this.sun.angle=0),s.Globals.player){var t=s.Globals.player.getRealLocation();t.divide(new Phaser.Math.Vector2(500,500)),t.negate(),this.sun.x=this.startPosition.x+t.x,this.sun.y=this.startPosition.y+t.y}},e}(a.ZoomableScene);e.SystemScene=c}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,