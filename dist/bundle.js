!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],t):"object"==typeof exports?exports.bundle=t(require("phaser")):e.bundle=t(e.phaser)}(window,(function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Globals||(t.Globals={})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:r.GameScene};t.game=new Phaser.Game(o),window.addEventListener("resize",(function(){t.game.scale.refresh()}))},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),s=n(2),a={active:!0,visible:!0,key:"GameScene"},u=function(e){function t(){return e.call(this,a)||this}return o(t,e),t.prototype.preload=function(){},t.prototype.create=function(){s.Globals.inputKeys=this.input.keyboard.createCursorKeys();var e={scene:this,x:200,y:200,texture:"./assets/sprites/ship-pod.png",frame:0};s.Globals.player=new i.ShipPod(e),this.input.on("pointermove",(function(e){console.log("mouse: "+e.x+", "+e.y),s.Globals.mouseLocation=new Phaser.Math.Vector2(e.x,e.y)})),this.input.on("KEY_DOWN_P",(function(e){s.Globals.isPaused=!0})),this.input.on("KEY_DOWN_R",(function(){s.Globals.isPaused=!1}))},t.prototype.update=function(){s.Globals.isPaused||s.Globals.player.update()},t}(Phaser.Scene);t.GameScene=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6);n(10);var o=n(2),i=function(){function e(e){this.active=!0,this.fuelCapacity=100,this.remainingFuel=100,this.thrusterForce=1,this.thrusterFuelConsumption=.01,this.thrusterHeatGeneration=.5,this.rotationRate=.2,this.integrity=100,this.temperature=0,this.realPosition=Phaser.Math.Vector2.ZERO,this.config=e,this.id=r.RNG.guid(),this.gameObj=this.config.scene.physics.add.sprite(this.config.scene.game.scale.width/2,this.config.scene.game.scale.height/2,"ship-pod")}return e.prototype.update=function(){this.lookAt(o.Globals.mouseLocation),o.Globals.inputKeys.space.isDown&&this.activateThruster(),this.applyCooling(),this.integrityCheck()},e.prototype.getId=function(){return this.id},e.prototype.lookAt=function(e){if(e){var t=Phaser.Math.Angle.Between(e.x,e.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(t)}},e.prototype.activateThruster=function(){if(this.remainingFuel>0){var e=o.Globals.mouseLocation.clone().subtract(new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)).clone().normalize().clone().multiply(new Phaser.Math.Vector2(this.thrusterForce,this.thrusterForce)),t=this.gameObj.body.velocity;console.log("current velocity: "+JSON.stringify(t));var n=t.add(e);this.gameObj.setVelocity(n.x,n.y),this.remainingFuel-=this.thrusterFuelConsumption,this.applyHeating(this.thrusterHeatGeneration)}},e.prototype.applyHeating=function(e){if(this.temperature+=e,this.temperature>100){var t=this.temperature-100;this.integrity-=t}},e.prototype.applyCooling=function(){this.temperature>0&&(this.temperature-=.1),this.temperature<0&&(this.temperature=0)},e.prototype.integrityCheck=function(){this.integrity<=0&&(this.active=!1)},e}();t.ShipPod=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7);!function(e){e.int=function(e,t){return Math.floor(Math.random()*(t-e+1))+e},e.guid=function(){return r.v4()}}(t.RNG||(t.RNG={}))},function(e,t,n){var r=n(8),o=n(9),i=o;i.v1=r,i.v4=o,e.exports=i},function(e,t,n){var r,o,i=n(0),s=n(1),a=0,u=0;e.exports=function(e,t,n){var c=t&&n||0,p=t||[],l=(e=e||{}).node||r,f=void 0!==e.clockseq?e.clockseq:o;if(null==l||null==f){var h=i();null==l&&(l=r=[1|h[0],h[1],h[2],h[3],h[4],h[5]]),null==f&&(f=o=16383&(h[6]<<8|h[7]))}var d=void 0!==e.msecs?e.msecs:(new Date).getTime(),y=void 0!==e.nsecs?e.nsecs:u+1,v=d-a+(y-u)/1e4;if(v<0&&void 0===e.clockseq&&(f=f+1&16383),(v<0||d>a)&&void 0===e.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,u=y,o=f;var m=(1e4*(268435455&(d+=122192928e5))+y)%4294967296;p[c++]=m>>>24&255,p[c++]=m>>>16&255,p[c++]=m>>>8&255,p[c++]=255&m;var g=d/4294967296*1e4&268435455;p[c++]=g>>>8&255,p[c++]=255&g,p[c++]=g>>>24&15|16,p[c++]=g>>>16&255,p[c++]=f>>>8|128,p[c++]=255&f;for(var b=0;b<6;++b)p[c+b]=l[b];return t||s(p)}},function(e,t,n){var r=n(0),o=n(1);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[i+a]=s[a];return t||o(s)}},function(t,n){t.exports=e}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,