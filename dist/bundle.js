!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Globals||(e.Globals={})},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var o=new Uint8Array(16);t.exports=function(){return n(o),o}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var n=[],o=0;o<256;++o)n[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,i=n;return[i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),i=n(0),a=n(15),r={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:[o.ShipScene,a.OverlayScene]};e.game=new Phaser.Game(r),window.addEventListener("resize",(function(){e.game.scale.refresh()})),i.Globals.game=e.game},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(5),r=n(0),s=n(14),c={active:!0,visible:!0,key:"ShipScene"},u=function(t){function e(){return t.call(this,c)||this}return i(e,t),e.prototype.preload=function(){this.load.image("stars","./assets/backgrounds/tileableStars.png"),this.load.image("ship-pod","./assets/sprites/ship-pod.png")},e.prototype.create=function(){var t=this;this.add.tileSprite(0,0,10*this.cameras.main.width,10*this.cameras.main.height,"stars"),this.mouse=new s.Mouse(this),this.player=new a.ShipPod(this),r.Globals.player=this.player,this.player.setTarget(this.mouse),this.setupCamera(this.player),this.input.keyboard.on("keydown-P",(function(){r.Globals.paused=!0})),this.input.keyboard.on("keydown-R",(function(){r.Globals.paused=!1})),this.mouse.onWheelUp((function(e){var n=t.cameras.main.zoom-.5;n<.1&&(n=.1),t.cameras.main.zoomTo(n)})),this.mouse.onWheelDown((function(e){var n=t.cameras.main.zoom+.5;n>1&&(n=1),t.cameras.main.zoomTo(n)}))},e.prototype.update=function(){r.Globals.paused||r.Globals.player.update()},e.prototype.setupCamera=function(t){this.cameras.main.backgroundColor.setFromRGB({r:0,g:0,b:0}),this.cameras.main.setZoom(1),this.cameras.main.centerOn(0,0);var e=this.cameras.main.width,n=this.cameras.main.height,o=Math.floor(e/2),i=Math.floor(n/2),a=Math.floor(o/2),r=Math.floor(i/2);this.cameras.main.startFollow(t.getGameObject(),!0),this.cameras.main.deadzone=new Phaser.Geom.Rectangle(a,r,o,i)},e}(Phaser.Scene);e.ShipScene=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(6);var o=n(7),i=n(0),a=n(11),r=n(12),s=n(13),c=function(){function t(t){this.remainingFuel=100,this.temperature=0,this.active=!0,this.lastOverheatCheck=0,this.id=o.RNG.guid(),this.scene=t,this.gameObj=t.physics.add.sprite(0,0,"ship-pod"),this.integrity=a.Constants.MAX_INTEGRITY,this.attachments=new Array(r.Helpers.enumLength(s.AttachmentLocation)),this.setupInputHandlers()}return t.prototype.update=function(){!i.Globals.paused&&this.active&&(this.lookAtTarget(),this.thrustKey.isDown&&this.thrustFowards(),this.checkOverheatCondition(),this.rotateAttachmentsClockwiseKey.isDown&&this.rotateAttachmentsClockwise(),this.rotateAttachmentsAntiClockwiseKey.isDown&&this.rotateAttachmentsAntiClockwise(),this.updateAttachments())},t.prototype.updateAttachments=function(){for(var t=0;t<this.attachments.length;t++){var e=this.attachments[t];e&&e.update()}},t.prototype.setupInputHandlers=function(){this.thrustKey=this.scene.input.keyboard.addKey("SPACE",!0,!0),this.rotateAttachmentsClockwiseKey=this.scene.input.keyboard.addKey("E",!0,!0),this.rotateAttachmentsAntiClockwiseKey=this.scene.input.keyboard.addKey("Q",!0,!0)},t.prototype.checkOverheatCondition=function(){if(!i.Globals.paused&&this.active&&r.Helpers.now()-this.lastOverheatCheck>a.Constants.OVERHEAT_CHECK_INTERVAL){if(this.temperature>a.Constants.MAX_TEMPERATURE&&this.destroy(),this.temperature>a.Constants.MAX_SAFE_TEMPERATURE){var t=(this.temperature-a.Constants.MAX_SAFE_TEMPERATURE)/a.Constants.MAX_SAFE_TEMPERATURE;this.sustainDamage(t)}this.applyCooling(a.Constants.COOLING_RATE),this.lastOverheatCheck=r.Helpers.now()}},t.prototype.getRealLocation=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.setTarget=function(t){this.target=t},t.prototype.lookAtTarget=function(){var t=this.target.getRealLocation(),e=Phaser.Math.Angle.Between(t.x,t.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(e)},t.prototype.getHeading=function(){var t=Math.cos(this.gameObj.rotation),e=Math.sin(this.gameObj.rotation);return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.getVelocity=function(){return this.gameObj.body.velocity.length()},t.prototype.thrustFowards=function(){if(this.remainingFuel>0){var t=this.getHeading().multiply(new Phaser.Math.Vector2(a.Constants.THRUSTER_FORCE,a.Constants.THRUSTER_FORCE));this.gameObj.body.velocity.add(t),this.reduceFuel(a.Constants.FUEL_PER_THRUST),this.applyHeating(a.Constants.HEAT_PER_THRUST)}},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.getTemperature=function(){return this.temperature},t.prototype.applyHeating=function(t){this.temperature+=t},t.prototype.applyCooling=function(t){this.temperature-=t,this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>a.Constants.MAX_INTEGRITY&&(this.integrity=a.Constants.MAX_INTEGRITY)},t.prototype.rotateAttachmentsClockwise=function(){var t=this.attachments.pop();this.attachments.unshift(t),this.updateAttachmentPositions()},t.prototype.rotateAttachmentsAntiClockwise=function(){var t=this.attachments.shift();this.attachments.push(t),this.updateAttachmentPositions()},t.prototype.updateAttachmentPositions=function(){for(var t=0;t<this.attachments.length;t++)switch(t){case s.AttachmentLocation.front:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.front);break;case s.AttachmentLocation.frontRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontRight);break;case s.AttachmentLocation.right:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.right);break;case s.AttachmentLocation.backRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backRight);break;case s.AttachmentLocation.backLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backLeft);break;case s.AttachmentLocation.left:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.left);break;case s.AttachmentLocation.frontLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontLeft)}},t.prototype.addAttachment=function(t){this.removeAttachment(s.AttachmentLocation.front),this.attachments[s.AttachmentLocation.front]=t,t.attach(this)},t.prototype.removeAttachment=function(t){this.attachments[t].detach(),this.attachments[t]=null},t.prototype.destroy=function(){},t}();e.ShipPod=c},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(8);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var o=n(9),i=n(10),a=i;a.v1=o,a.v4=i,t.exports=a},function(t,e,n){var o,i,a=n(1),r=n(2),s=0,c=0;t.exports=function(t,e,n){var u=e&&n||0,h=e||[],p=(t=t||{}).node||o,f=void 0!==t.clockseq?t.clockseq:i;if(null==p||null==f){var l=a();null==p&&(p=o=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==f&&(f=i=16383&(l[6]<<8|l[7]))}var m=void 0!==t.msecs?t.msecs:(new Date).getTime(),d=void 0!==t.nsecs?t.nsecs:c+1,y=m-s+(d-c)/1e4;if(y<0&&void 0===t.clockseq&&(f=f+1&16383),(y<0||m>s)&&void 0===t.nsecs&&(d=0),d>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=m,c=d,i=f;var g=(1e4*(268435455&(m+=122192928e5))+d)%4294967296;h[u++]=g>>>24&255,h[u++]=g>>>16&255,h[u++]=g>>>8&255,h[u++]=255&g;var v=m/4294967296*1e4&268435455;h[u++]=v>>>8&255,h[u++]=255&v,h[u++]=v>>>24&15|16,h[u++]=v>>>16&255,h[u++]=f>>>8|128,h[u++]=255&f;for(var b=0;b<6;++b)h[u+b]=p[b];return e||r(h)}},function(t,e,n){var o=n(1),i=n(2);t.exports=function(t,e,n){var a=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var r=(t=t||{}).random||(t.rng||o)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e)for(var s=0;s<16;++s)e[a+s]=r[s];return e||i(r)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MAX_INTEGRITY=100,t.MAX_FUEL=100,t.MAX_SAFE_TEMPERATURE=100,t.MAX_TEMPERATURE=200,t.OVERHEAT_CHECK_INTERVAL=100,t.COOLING_RATE=.3,t.FUEL_PER_THRUST=.01,t.HEAT_PER_THRUST=.1,t.THRUSTER_FORCE=1}(e.Constants||(e.Constants={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.enumLength=function(t){var e=0;for(var n in t)isNaN(Number(n))&&e++;return e},t.now=function(){return(new Date).getTime()}}(e.Helpers||(e.Helpers={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.front=0]="front",t[t.frontRight=1]="frontRight",t[t.right=2]="right",t[t.backRight=3]="backRight",t[t.backLeft=4]="backLeft",t[t.left=5]="left",t[t.frontLeft=6]="frontLeft"}(e.AttachmentLocation||(e.AttachmentLocation={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.scene=t,this.scene.input.mouse.capture=!0}return t.prototype.getLocation=function(){return this.scene.input.activePointer.position.clone()},t.prototype.getRealLocation=function(){var t=this.getLocation();return this.scene.cameras.main.getWorldPoint(t.x,t.y)},t.prototype.onWheelUp=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,r){i>0&&t(i)}))},t.prototype.onWheelDown=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,r){i<0&&t(-i)}))},t}();e.Mouse=o},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),r={active:!0,visible:!0,key:"OverlayScene"},s=function(t){function e(){return t.call(this,r)||this}return i(e,t),e.prototype.preload=function(){},e.prototype.create=function(){this.debug=this.add.text(10,10,"",{font:"16px Courier",fill:"#ffdddd"})},e.prototype.update=function(){if(!a.Globals.paused&&a.Globals.player){var t=a.Globals.player,e=t.getRealLocation();this.debug.setText(["Velocity: "+t.getVelocity(),"Integrity: "+Math.round(t.getIntegrity()),"Heat: "+Math.round(t.getTemperature()),"Location: "+Math.round(e.x)+","+Math.round(e.y)])}},e}(Phaser.Scene);e.OverlayScene=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,