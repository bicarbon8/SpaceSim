!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Globals||(e.Globals={})},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var o=new Uint8Array(16);t.exports=function(){return n(o),o}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var n=[],o=0;o<256;++o)n[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,i=n;return[i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),i=n(0),r={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:o.ShipScene};e.game=new Phaser.Game(r),window.addEventListener("resize",(function(){e.game.scale.refresh()})),i.Globals.game=e.game},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),s=n(0),a=n(14),c={active:!0,visible:!0,key:"ShipScene"},u=function(t){function e(){return t.call(this,c)||this}return i(e,t),e.prototype.preload=function(){this.load.image("stars","./assets/backgrounds/tileableStars.png"),this.load.image("ship-pod","./assets/sprites/ship-pod.png")},e.prototype.create=function(){var t=this;this.add.tileSprite(0,0,10*this.cameras.main.width,10*this.cameras.main.height,"stars"),s.Globals.mouse||(s.Globals.mouse=new a.Mouse(this)),s.Globals.player=new r.ShipPod(this),this.setupCamera(s.Globals.player),this.input.on("KEY_DOWN_P",(function(t){s.Globals.isPaused=!0})),this.input.on("KEY_DOWN_R",(function(){s.Globals.isPaused=!1})),this.input.on("wheel",(function(e,n,o,i,r,s){var a=t.cameras.main.zoom;if(i<0)(c=a+.5)>1&&(c=1),t.cameras.main.zoomTo(c);else if(i>0){var c;(c=a-.5)<.1&&(c=.1),t.cameras.main.zoomTo(c)}}))},e.prototype.update=function(){s.Globals.isPaused||s.Globals.player.update()},e.prototype.setupCamera=function(t){this.cameras.main.backgroundColor.setFromRGB({r:0,g:0,b:0}),this.cameras.main.setZoom(1),this.cameras.main.centerOn(0,0);var e=this.cameras.main.width,n=this.cameras.main.height,o=Math.floor(e/2),i=Math.floor(n/2),r=Math.floor(o/2),s=Math.floor(i/2);this.cameras.main.startFollow(t.getGameObject(),!0),this.cameras.main.deadzone=new Phaser.Geom.Rectangle(r,s,o,i)},e}(Phaser.Scene);e.ShipScene=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(6);var o=n(7),i=n(0),r=n(11),s=n(12),a=n(13),c=function(){function t(t){this.remainingFuel=100,this.temperature=0,this.active=!0,this.id=o.RNG.guid(),this.scene=t,this.gameObj=t.physics.add.sprite(0,0,"ship-pod"),this.integrity=r.Constants.MAX_INTEGRITY,this.attachments=new Array(s.Helpers.enumLength(a.AttachmentLocation)),this.setTarget(i.Globals.mouse),this.setupInputHandlers(),this.checkOverheatCondition()}return t.prototype.update=function(){!i.Globals.isPaused&&this.active&&(this.lookAtTarget(),this.thrustKey.isDown&&this.thrustFowards(),this.rotateAttachmentsClockwiseKey.isDown&&this.rotateAttachmentsClockwise(),this.rotateAttachmentsAntiClockwiseKey.isDown&&this.rotateAttachmentsAntiClockwise())},t.prototype.setupInputHandlers=function(){this.thrustKey=this.scene.input.keyboard.addKey("SPACE",!0,!0),this.rotateAttachmentsClockwiseKey=this.scene.input.keyboard.addKey("E",!0,!0),this.rotateAttachmentsAntiClockwiseKey=this.scene.input.keyboard.addKey("Q",!0,!0)},t.prototype.checkOverheatCondition=function(){if(!i.Globals.isPaused&&this.active){if(this.temperature>r.Constants.MAX_TEMPERATURE&&this.destroy(),this.temperature>r.Constants.MAX_SAFE_TEMPERATURE){var t=this.temperature-r.Constants.MAX_SAFE_TEMPERATURE;this.integrity-=t}this.applyCooling(r.Constants.COOLING_RATE)}setTimeout(this.checkOverheatCondition,r.Constants.OVERHEAT_CHECK_INTERVAL)},t.prototype.getRealPosition=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.getPosition=function(){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.setTarget=function(t){this.target=t},t.prototype.lookAtTarget=function(){var t=this.target.getRealPosition(),e=Phaser.Math.Angle.Between(t.x,t.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(e)},t.prototype.getHeading=function(){var t=Math.cos(this.gameObj.rotation),e=Math.sin(this.gameObj.rotation);return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.thrustFowards=function(){if(this.remainingFuel>0){var t=this.getHeading().multiply(new Phaser.Math.Vector2(r.Constants.THRUSTER_FORCE,r.Constants.THRUSTER_FORCE));this.gameObj.body.velocity.add(t),this.reduceFuel(r.Constants.FUEL_PER_THRUST),this.applyHeating(r.Constants.HEAT_PER_THRUST)}},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.applyHeating=function(t){this.temperature+=t},t.prototype.applyCooling=function(t){this.temperature-=t,this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>r.Constants.MAX_INTEGRITY&&(this.integrity=r.Constants.MAX_INTEGRITY)},t.prototype.rotateAttachmentsClockwise=function(){var t=this.attachments.pop();this.attachments.unshift(t)},t.prototype.rotateAttachmentsAntiClockwise=function(){var t=this.attachments.shift();this.attachments.push(t)},t.prototype.addAttachment=function(t){this.attachments[a.AttachmentLocation.front]&&this.attachments[a.AttachmentLocation.front].detach();this.attachments[a.AttachmentLocation.front]=t,t.attach(this)},t.prototype.destroy=function(){},t}();e.ShipPod=c},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(8);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var o=n(9),i=n(10),r=i;r.v1=o,r.v4=i,t.exports=r},function(t,e,n){var o,i,r=n(1),s=n(2),a=0,c=0;t.exports=function(t,e,n){var u=e&&n||0,h=e||[],p=(t=t||{}).node||o,l=void 0!==t.clockseq?t.clockseq:i;if(null==p||null==l){var f=r();null==p&&(p=o=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==l&&(l=i=16383&(f[6]<<8|f[7]))}var d=void 0!==t.msecs?t.msecs:(new Date).getTime(),m=void 0!==t.nsecs?t.nsecs:c+1,y=d-a+(m-c)/1e4;if(y<0&&void 0===t.clockseq&&(l=l+1&16383),(y<0||d>a)&&void 0===t.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,c=m,i=l;var g=(1e4*(268435455&(d+=122192928e5))+m)%4294967296;h[u++]=g>>>24&255,h[u++]=g>>>16&255,h[u++]=g>>>8&255,h[u++]=255&g;var v=d/4294967296*1e4&268435455;h[u++]=v>>>8&255,h[u++]=255&v,h[u++]=v>>>24&15|16,h[u++]=v>>>16&255,h[u++]=l>>>8|128,h[u++]=255&l;for(var b=0;b<6;++b)h[u+b]=p[b];return e||s(h)}},function(t,e,n){var o=n(1),i=n(2);t.exports=function(t,e,n){var r=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||o)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var a=0;a<16;++a)e[r+a]=s[a];return e||i(s)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MAX_INTEGRITY=100,t.MAX_FUEL=100,t.MAX_SAFE_TEMPERATURE=100,t.MAX_TEMPERATURE=200,t.OVERHEAT_CHECK_INTERVAL=1e3,t.COOLING_RATE=.1,t.FUEL_PER_THRUST=.01,t.HEAT_PER_THRUST=.5,t.THRUSTER_FORCE=1}(e.Constants||(e.Constants={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.enumLength=function(t){var e=0;for(var n in t)isNaN(Number(n))&&e++;return e}}(e.Helpers||(e.Helpers={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.front=0]="front",t[t.frontRight=1]="frontRight",t[t.right=2]="right",t[t.backRight=3]="backRight",t[t.backLeft=4]="backLeft",t[t.left=5]="left",t[t.frontLeft=6]="frontLeft"}(e.AttachmentLocation||(e.AttachmentLocation={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){var e=this;this.scene=t,this.location=Phaser.Math.Vector2.ZERO,this.scene.input.mouse.capture=!0,this.scene.input.on("pointermove",(function(t){e.location=new Phaser.Math.Vector2(t.x,t.y)}))}return t.prototype.getPosition=function(){return this.location.clone()},t.prototype.getRealPosition=function(){return this.scene.cameras.main.getWorldPoint(this.location.x,this.location.y)},t}();e.Mouse=o}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,