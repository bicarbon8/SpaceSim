!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.interactables=[]}(e.Globals||(e.Globals={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.enumLength=function(t){var e=0;for(var n in t)isNaN(Number(n))&&e++;return e},t.now=function(){return(new Date).getTime()},t.getHeading=function(t){if(t){var e=Math.cos(Phaser.Math.DegToRad(t.rotation)),n=Math.sin(Phaser.Math.DegToRad(t.rotation));return new Phaser.Math.Vector2(e,n).normalize().negate()}return Phaser.Math.Vector2.ZERO},t.offsetWithHeading=function(e,n){var o=t.getHeading(e);o.multiply(n),e.position.add(o)}}(e.Helpers||(e.Helpers={}))},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(18),s=function(t){function e(e){return t.call(this,e)||this}return i(e,t),e.prototype.create=function(){var t=this;this.mouse=new a.Mouse(this),this.mouse.onWheelUp((function(e){var n=t.cameras.main.zoom-.5;n<.1&&(n=.1),t.cameras.main.zoomTo(n)})),this.mouse.onWheelDown((function(e){var n=t.cameras.main.zoom+.5;n>1&&(n=1),t.cameras.main.zoomTo(n)}))},e}(Phaser.Scene);e.ZoomableScene=s},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var o=new Uint8Array(16);t.exports=function(){return n(o),o}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var n=[],o=0;o<256;++o)n[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,i=n;return[i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MAX_INTEGRITY=100,t.MAX_FUEL=100,t.MAX_SAFE_TEMPERATURE=100,t.MAX_TEMPERATURE=200,t.MAX_VELOCITY=500,t.OVERHEAT_CHECK_INTERVAL=100,t.COOLING_RATE=.3,t.THRUSTER_FORCE=1,t.FUEL_PER_THRUST=.001,t.HEAT_PER_THRUST=.1,t.BOOSTER_FORCE=300,t.FUEL_PER_BOOST=1,t.HEAT_PER_BOOST=25,t.BOOSTER_COOLDOWN_TIME=1e3,t.THROW_FORCE=100,function(t){t[t.blue=0]="blue",t[t.green=1]="green",t[t.red=2]="red",t[t.white=3]="white",t[t.yellow=4]="yellow"}(t.Flare||(t.Flare={}))}(e.Constants||(e.Constants={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.front=0]="front",t[t.frontRight=1]="frontRight",t[t.right=2]="right",t[t.backRight=3]="backRight",t[t.backLeft=4]="backLeft",t[t.left=5]="left",t[t.frontLeft=6]="frontLeft"}(e.AttachmentLocation||(e.AttachmentLocation={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(8),i=n(0),a=n(19),s=n(20),r=n(21),c={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:[s.FarStarsScene,r.SystemScene,o.ShipScene,a.OverlayScene]};e.game=new Phaser.Game(c),window.addEventListener("resize",(function(){e.game.scale.refresh()})),i.Globals.game=e.game},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(9),s=n(0),r=n(15),c=n(2),h={active:!0,visible:!0,key:"ShipScene"},u=function(t){function e(){return t.call(this,h)||this}return i(e,t),e.prototype.preload=function(){this.load.image("ship-pod","./assets/sprites/ship-pod.png"),this.load.image("cannon","./assets/sprites/cannon.png"),this.load.spritesheet("flares","./assets/particles/flares.png",{frameWidth:130,frameHeight:132,startFrame:0,endFrame:4}),this.load.image("explosion","./assets/particles/explosion.png"),this.load.image("bullet","./assets/sprites/bullet.png")},e.prototype.create=function(){t.prototype.create.call(this),this.player=new a.ShipPod(this),s.Globals.player=this.player,this.player.setTarget(this.mouse);var e=new r.CannonAttachment(this);this.player.addAttachment(e),this.setupCamera(this.player),this.game.canvas.oncontextmenu=function(t){t.preventDefault()}},e.prototype.update=function(){this.player.update()},e.prototype.setupCamera=function(t){this.cameras.main.backgroundColor.setFromRGB({r:0,g:0,b:0}),this.cameras.main.setZoom(1),this.cameras.main.centerOn(0,0);var e=this.cameras.main.width,n=this.cameras.main.height,o=Math.floor(e/2),i=Math.floor(n/2),a=Math.floor(o/2),s=Math.floor(i/2);this.cameras.main.startFollow(t.getGameObject(),!0),this.cameras.main.deadzone=new Phaser.Geom.Rectangle(a,s,o,i)},e}(c.ZoomableScene);e.ShipScene=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(10);var o=n(11),i=n(5),a=n(1),s=n(6),r=function(){function t(t){this.remainingFuel=100,this.temperature=0,this.active=!0,this.lastOverheatCheck=0,this.lastBoostTime=0,this.id=o.RNG.guid(),this.scene=t,this.gameObj=t.add.container(0,0),this.scene.physics.add.existing(this.gameObj),this.getPhysicsBody().bounce.setTo(.7,.7),this.getPhysicsBody().setMaxVelocity(i.Constants.MAX_VELOCITY,i.Constants.MAX_VELOCITY),this.thrusterParticles=t.add.particles("flares",i.Constants.Flare.yellow),this.explosionParticles=t.add.particles("explosion");var e=t.add.sprite(0,0,"ship-pod");this.gameObj.add(e),this.integrity=i.Constants.MAX_INTEGRITY,this.attachments=new Array(a.Helpers.enumLength(s.AttachmentLocation)),this.setupInputHandlers()}return t.prototype.update=function(){this.active&&(this.lookAtTarget(),this.thrustKey.isDown&&this.thrustFowards(),this.boostKey.isDown&&this.boostForwards(),this.scene.input.activePointer.leftButtonDown()&&this.attachments[0]&&this.attachments[0].trigger(),this.scene.input.activePointer.rightButtonDown()&&this.attachments[0]&&this.throwAttachment(this.attachments[0]),this.checkOverheatCondition(),this.rotateAttachmentsClockwiseKey.isDown&&this.rotateAttachmentsClockwise(),this.rotateAttachmentsAntiClockwiseKey.isDown&&this.rotateAttachmentsAntiClockwise(),this.detachAttachmentKey.isDown&&this.removeAttachment(s.AttachmentLocation.front),this.updateAttachments())},t.prototype.updateAttachments=function(){for(var t=0;t<this.attachments.length;t++){var e=this.attachments[t];e&&e.update()}},t.prototype.setupInputHandlers=function(){this.thrustKey=this.scene.input.keyboard.addKey("SPACE",!0,!0),this.boostKey=this.scene.input.keyboard.addKey("TAB",!0,!1),this.rotateAttachmentsClockwiseKey=this.scene.input.keyboard.addKey("E",!0,!1),this.rotateAttachmentsAntiClockwiseKey=this.scene.input.keyboard.addKey("Q",!0,!1),this.detachAttachmentKey=this.scene.input.keyboard.addKey("X",!0,!1)},t.prototype.checkOverheatCondition=function(){if(this.active&&this.scene.game.getTime()>this.lastOverheatCheck+i.Constants.OVERHEAT_CHECK_INTERVAL){if(this.temperature>i.Constants.MAX_TEMPERATURE&&this.destroy(),this.temperature>i.Constants.MAX_SAFE_TEMPERATURE){var t=(this.temperature-i.Constants.MAX_SAFE_TEMPERATURE)/i.Constants.MAX_SAFE_TEMPERATURE;this.sustainDamage(t)}this.applyCooling(i.Constants.COOLING_RATE),this.lastOverheatCheck=this.scene.game.getTime()}},t.prototype.getRealLocation=function(){return this.getGameObject()?new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y):Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){if(this.getGameObject()){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)}return Phaser.Math.Vector2.ZERO},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getPhysicsBody=function(){return this.getGameObject()?this.getGameObject().body:null},t.prototype.setTarget=function(t){this.target=t},t.prototype.getTarget=function(){return this.target},t.prototype.lookAtTarget=function(){if(this.getPhysicsBody()&&this.getTarget()){var t=this.getTarget().getRealLocation(),e=this.getRealLocation(),n=Phaser.Math.Angle.Between(t.x,t.y,e.x,e.y),o=Phaser.Math.RadToDeg(n);this.getPhysicsBody().rotation=o}},t.prototype.getRotation=function(){return this.getPhysicsBody()?this.getPhysicsBody().rotation:0},t.prototype.getHeading=function(){return a.Helpers.getHeading(this.getPhysicsBody())},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.getPhysicsBody()?this.getPhysicsBody().velocity.clone():Phaser.Math.Vector2.ZERO},t.prototype.thrustFowards=function(){this.applyThrust(i.Constants.THRUSTER_FORCE,i.Constants.FUEL_PER_THRUST,i.Constants.HEAT_PER_THRUST),this.displayThrusterFire(i.Constants.Flare.yellow,.2,1)},t.prototype.boostForwards=function(){a.Helpers.now()-this.lastBoostTime>=i.Constants.BOOSTER_COOLDOWN_TIME&&(this.applyThrust(i.Constants.BOOSTER_FORCE,i.Constants.FUEL_PER_BOOST,i.Constants.HEAT_PER_BOOST),this.displayThrusterFire(i.Constants.Flare.blue,1,10),this.lastBoostTime=a.Helpers.now())},t.prototype.applyThrust=function(t,e,n){if(this.getRemainingFuel()>0){var o=this.getHeading().multiply(new Phaser.Math.Vector2(t,t));this.getPhysicsBody().velocity.add(o),this.reduceFuel(e),this.applyHeating(n)}},t.prototype.displayThrusterFire=function(t,e,n){var o=this.getRealLocation(),i=new Phaser.Math.Vector2(20,0).add(o),a=this.getHeading().negate(),s=Phaser.Math.RotateAround(i,o.x,o.y,Phaser.Math.DegToRad(this.getRotation()));this.getVelocity();this.thrusterParticles.createEmitter({frame:t,x:s.x,y:s.y,lifespan:{min:250,max:500},speedX:{min:100*a.x,max:500*a.x},speedY:{min:100*a.y,max:500*a.y},angle:0,gravityX:0,gravityY:0,scale:{start:e,end:0},quantity:n,blendMode:"ADD",maxParticles:10})},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.getTemperature=function(){return this.temperature},t.prototype.applyHeating=function(t){this.temperature+=t},t.prototype.applyCooling=function(t){this.temperature-=t,this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.addFuel=function(t){this.remainingFuel+=t,this.remainingFuel>i.Constants.MAX_FUEL&&(this.remainingFuel=i.Constants.MAX_FUEL)},t.prototype.getRemainingFuel=function(){return this.remainingFuel},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>i.Constants.MAX_INTEGRITY&&(this.integrity=i.Constants.MAX_INTEGRITY)},t.prototype.rotateAttachmentsClockwise=function(){var t=this.attachments.pop();this.attachments.unshift(t),this.updateAttachmentPositions()},t.prototype.rotateAttachmentsAntiClockwise=function(){var t=this.attachments.shift();this.attachments.push(t),this.updateAttachmentPositions()},t.prototype.updateAttachmentPositions=function(){for(var t=0;t<this.attachments.length;t++)if(this.attachments[t])switch(t){case s.AttachmentLocation.front:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.front);break;case s.AttachmentLocation.frontRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontRight);break;case s.AttachmentLocation.right:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.right);break;case s.AttachmentLocation.backRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backRight);break;case s.AttachmentLocation.backLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backLeft);break;case s.AttachmentLocation.left:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.left);break;case s.AttachmentLocation.frontLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontLeft)}},t.prototype.addAttachment=function(t){for(var e=!1,n=0;n<a.Helpers.enumLength(s.AttachmentLocation);n++)if(!this.attachments[n]){var o=void 0;switch(n){case s.AttachmentLocation.front:o=s.AttachmentLocation.front;break;case s.AttachmentLocation.frontRight:o=s.AttachmentLocation.frontRight;break;case s.AttachmentLocation.right:o=s.AttachmentLocation.right;break;case s.AttachmentLocation.backRight:o=s.AttachmentLocation.backRight;break;case s.AttachmentLocation.backLeft:o=s.AttachmentLocation.backLeft;break;case s.AttachmentLocation.left:o=s.AttachmentLocation.left;break;case s.AttachmentLocation.frontLeft:o=s.AttachmentLocation.frontLeft}this.attachments[n]=t,t.attach(this,o),e=!0}e||(this.attachments[s.AttachmentLocation.front].detach(),this.attachments[s.AttachmentLocation.front]=t,t.attach(this,s.AttachmentLocation.front)),this.gameObj.add(t.getGameObject())},t.prototype.removeAttachment=function(t){if(this.attachments[t]){var e=this.attachments[t].getPhysicsBody(),n=this.attachments[t].getGameObject();this.gameObj.remove(n,!1),this.attachments[t].detach(),this.attachments[t]=null,e.position=this.getRealLocation();var o=this.getPhysicsBody().velocity;e.setVelocity(o.x,o.y),e.rotation=this.getRotation()}},t.prototype.throwAttachment=function(t){if(t)for(var e=0;e<this.attachments.length;e++)if(this.attachments[e]&&this.attachments[e]==t){this.removeAttachment(e),t.throw();break}},t.prototype.getAttachments=function(){return this.attachments},t.prototype.destroy=function(){this.active=!1,this.displayShipExplosion(),this.getGameObject().destroy(),this.gameObj=null},t.prototype.displayShipExplosion=function(){var t=this.getRealLocation();this.explosionParticles.createEmitter({x:t.x,y:t.y,lifespan:{min:500,max:1e3},speedX:{min:-1,max:1},speedY:{min:-1,max:1},angle:{min:-180,max:179},gravityX:0,gravityY:0,scale:{start:1,end:0},blendMode:"ADD",maxParticles:3}),this.thrusterParticles.createEmitter({frame:i.Constants.Flare.red,x:t.x,y:t.y,lifespan:{min:100,max:500},speedX:{min:-600,max:600},speedY:{min:-600,max:600},angle:{min:-180,max:179},gravityX:0,gravityY:0,scale:{start:1,end:0},blendMode:"ADD",maxParticles:10})},t}();e.ShipPod=r},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(12);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var o=n(13),i=n(14),a=i;a.v1=o,a.v4=i,t.exports=a},function(t,e,n){var o,i,a=n(3),s=n(4),r=0,c=0;t.exports=function(t,e,n){var h=e&&n||0,u=e||[],p=(t=t||{}).node||o,l=void 0!==t.clockseq?t.clockseq:i;if(null==p||null==l){var y=a();null==p&&(p=o=[1|y[0],y[1],y[2],y[3],y[4],y[5]]),null==l&&(l=i=16383&(y[6]<<8|y[7]))}var f=void 0!==t.msecs?t.msecs:(new Date).getTime(),m=void 0!==t.nsecs?t.nsecs:c+1,g=f-r+(m-c)/1e4;if(g<0&&void 0===t.clockseq&&(l=l+1&16383),(g<0||f>r)&&void 0===t.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");r=f,c=m,i=l;var d=(1e4*(268435455&(f+=122192928e5))+m)%4294967296;u[h++]=d>>>24&255,u[h++]=d>>>16&255,u[h++]=d>>>8&255,u[h++]=255&d;var v=f/4294967296*1e4&268435455;u[h++]=v>>>8&255,u[h++]=255&v,u[h++]=v>>>24&15|16,u[h++]=v>>>16&255,u[h++]=l>>>8|128,u[h++]=255&l;for(var b=0;b<6;++b)u[h+b]=p[b];return e||s(u)}},function(t,e,n){var o=n(3),i=n(4);t.exports=function(t,e,n){var a=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||o)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var r=0;r<16;++r)e[a+r]=s[r];return e||i(s)}},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(16),s=n(17),r=function(t){function e(e){var n=t.call(this,e)||this;return n.maxAmmo=500,n.remainingAmmo=n.maxAmmo,n.cooldownTime=0,n.firingDelay=1e3,n.gameObj=n.scene.physics.add.sprite(0,0,"cannon"),n}return i(e,t),e.prototype.reload=function(t){this.remainingAmmo+=t,this.remainingAmmo>this.maxAmmo&&(this.remainingAmmo=this.maxAmmo)},e.prototype.getRemainingAmmo=function(){return this.remainingAmmo},e.prototype.update=function(){},e.prototype.trigger=function(){this.active&&this.fire()},e.prototype.fire=function(t){if(this.active&&this.getRemainingAmmo()>0&&this.scene.game.getTime()>this.cooldownTime){var e=this.getRealLocation();new s.Bullet(this.scene,{x:e.x,y:e.y,force:3e3,angle:this.getRotation()}),this.cooldownTime=this.scene.game.getTime()+this.firingDelay}},e}(a.ShipAttachment);e.CannonAttachment=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(5),i=n(6),a=n(1),s=function(){function t(t){this.scene=t,this.active=!0,this.integrity=o.Constants.MAX_INTEGRITY,this.isThrown=!1}return t.prototype.attach=function(t,e){e||(e=i.AttachmentLocation.front),this.ship=t,this.setAttachmentLocation(e);var n=this.ship.getRealLocation();this.getPhysicsBody().position=n,this.getPhysicsBody().rotation=this.ship.getRotation()},t.prototype.detach=function(){this.ship=null,this.attachmentLocation=null;var t=this.getGameObject();t.setActive(!0),this.scene.add.existing(t)},t.prototype.throw=function(){this.isThrown=!0;var t=this.getHeading();t.multiply(new Phaser.Math.Vector2(o.Constants.THROW_FORCE,o.Constants.THROW_FORCE)),this.ship&&t.add(this.ship.getPhysicsBody().velocity),this.getPhysicsBody().velocity.add(t)},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getPhysicsBody=function(){return this.getGameObject()?this.getGameObject().body:null},t.prototype.getRotation=function(){var t=this.gameObj.rotation;return this.ship&&(t+=this.ship.getRotation()),t},t.prototype.getHeading=function(){var t=a.Helpers.getHeading(this.getPhysicsBody());return this.ship&&t.add(this.ship.getHeading()),t},t.prototype.getSpeed=function(){var t=this.getVelocity().length();return this.ship&&(t+=this.ship.getSpeed()),t},t.prototype.getVelocity=function(){if(this.getPhysicsBody()){var t=this.getPhysicsBody().velocity.clone();return this.ship&&t.add(this.ship.getVelocity()),t}return Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getRealLocation();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getRealLocation=function(){var t=this.getPhysicsBody(),e=new Phaser.Math.Vector2(t.x,t.y);return this.ship&&e.add(this.ship.getRealLocation()),e},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1)},t.prototype.repair=function(t){this.integrity=t,this.integrity>o.Constants.MAX_INTEGRITY&&(this.integrity=o.Constants.MAX_INTEGRITY)},t.prototype.destroy=function(){this.active=!1,this.ship.removeAttachment(this.attachmentLocation)},t.prototype.setAttachmentLocation=function(t){this.attachmentLocation=t},t}();e.ShipAttachment=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=n(1),a=function(){function t(t,e){this.scene=t,this.force=e.force||0,this.gameObj=t.physics.add.sprite(e.x||0,e.y||0,"bullet"),this.gameObj.setAngle(e.angle||0),this.active=!0,this.addCollisionDetection(),this.setInMotion()}return t.prototype.addCollisionDetection=function(){for(var t=0;t<o.Globals.interactables.length;t++)this.scene.physics.add.collider(this.gameObj,o.Globals.interactables[t],this.onImpact)},t.prototype.onImpact=function(t,e){},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getPhysicsBody=function(){if(this.getGameObject())return this.getGameObject().body},t.prototype.getAngle=function(){return this.gameObj.angle},t.prototype.getRotation=function(){return this.gameObj.rotation},t.prototype.getHeading=function(){return i.Helpers.getHeading(this.getPhysicsBody())},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.getPhysicsBody()?this.getPhysicsBody().velocity.clone():Phaser.Math.Vector2.ZERO},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getPhysicsBody();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getRealLocation=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.setInMotion=function(){var t=this.getHeading().multiply(new Phaser.Math.Vector2(this.force,this.force));this.gameObj.body.velocity.add(t)},t}();e.Bullet=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.scene=t,this.scene.input.mouse.capture=!0}return t.prototype.getAngle=function(){return this.scene.input.activePointer.getAngle()},t.prototype.getRotation=function(){return this.getAngle()*(Math.PI/180)},t.prototype.getHeading=function(){var t=this.getAngle(),e=Math.cos(t),n=Math.sin(t);return new Phaser.Math.Vector2(e,n).normalize().negate()},t.prototype.getSpeed=function(){return this.getVelocity().length()},t.prototype.getVelocity=function(){return this.scene.input.activePointer.velocity.clone()},t.prototype.getLocation=function(){return this.scene.input.activePointer.position.clone()},t.prototype.getRealLocation=function(){return this.scene.input.activePointer.positionToCamera(this.scene.cameras.main)},t.prototype.onWheelUp=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,s){i>0&&t(i)}))},t.prototype.onWheelDown=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,s){i<0&&t(-i)}))},t}();e.Mouse=o},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s={active:!0,visible:!0,key:"OverlayScene"},r=function(t){function e(){return t.call(this,s)||this}return i(e,t),e.prototype.preload=function(){},e.prototype.create=function(){this.debug=this.add.text(10,10,"",{font:"16px Courier",fill:"#ffdddd"})},e.prototype.update=function(){if(a.Globals.player){var t=a.Globals.player,e=t.getRealLocation();this.debug.setText(["Velocity: "+t.getSpeed().toFixed(1),"Integrity: "+t.getIntegrity().toFixed(1),"Heat: "+t.getTemperature().toFixed(1),"Fuel: "+t.getRemainingFuel().toFixed(1),"Location: "+e.x.toFixed(1)+","+e.y.toFixed(1),"Angle: "+t.getRotation().toFixed(1)])}},e}(Phaser.Scene);e.OverlayScene=r},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(2),s={active:!0,visible:!0,key:"FarStars"},r=function(t){function e(){return t.call(this,s)||this}return i(e,t),e.prototype.preload=function(){this.load.image("far-stars","./assets/backgrounds/starfield-tile-512x512.png")},e.prototype.create=function(){t.prototype.create.call(this);var e=Math.ceil(this.game.canvas.width/2),n=Math.ceil(this.game.canvas.height/2);this.add.tileSprite(e,n,10*this.game.canvas.width,10*this.game.canvas.height,"far-stars")},e.prototype.update=function(){},e}(a.ZoomableScene);e.FarStarsScene=r},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(2),s=n(0),r={active:!0,visible:!0,key:"SystemScene"},c=function(t){function e(){return t.call(this,r)||this}return i(e,t),e.prototype.preload=function(){this.load.image("sun","./assets/backgrounds/sun.png")},e.prototype.create=function(){t.prototype.create.call(this),this.startPosition=new Phaser.Math.Vector2(Phaser.Math.RND.between(0,this.game.canvas.width),Phaser.Math.RND.between(0,this.game.canvas.height)),this.sun=this.add.sprite(this.startPosition.x,this.startPosition.y,"sun")},e.prototype.update=function(){if(this.sun.angle+=.01,this.sun.angle>=360&&(this.sun.angle=0),s.Globals.player){var t=s.Globals.player.getRealLocation();t.divide(new Phaser.Math.Vector2(500,500)),t.negate(),this.sun.x=this.startPosition.x+t.x,this.sun.y=this.startPosition.y+t.y}},e}(a.ZoomableScene);e.SystemScene=c}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,