!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.interactables=[]}(e.Globals||(e.Globals={}))},function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var o=new Uint8Array(16);t.exports=function(){return n(o),o}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var n=[],o=0;o<256;++o)n[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,i=n;return[i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],"-",i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]],i[t[o++]]].join("")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MAX_INTEGRITY=100,t.MAX_FUEL=100,t.MAX_SAFE_TEMPERATURE=100,t.MAX_TEMPERATURE=200,t.OVERHEAT_CHECK_INTERVAL=100,t.COOLING_RATE=.3,t.THRUSTER_FORCE=1,t.FUEL_PER_THRUST=.001,t.HEAT_PER_THRUST=.1,t.BOOSTER_FORCE=300,t.FUEL_PER_BOOST=1,t.HEAT_PER_BOOST=25,t.BOOSTER_COOLDOWN_TIME=1e3}(e.Constants||(e.Constants={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.enumLength=function(t){var e=0;for(var n in t)isNaN(Number(n))&&e++;return e},t.now=function(){return(new Date).getTime()}}(e.Helpers||(e.Helpers={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.front=0]="front",t[t.frontRight=1]="frontRight",t[t.right=2]="right",t[t.backRight=3]="backRight",t[t.backLeft=4]="backLeft",t[t.left=5]="left",t[t.frontLeft=6]="frontLeft"}(e.AttachmentLocation||(e.AttachmentLocation={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(7),i=n(0),a=n(18),r={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:[o.ShipScene,a.OverlayScene]};e.game=new Phaser.Game(r),window.addEventListener("resize",(function(){e.game.scale.refresh()})),i.Globals.game=e.game},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(8),r=n(0),s=n(14),c=n(15),h={active:!0,visible:!0,key:"ShipScene"},u=function(t){function e(){return t.call(this,h)||this}return i(e,t),e.prototype.preload=function(){this.load.image("stars","./assets/backgrounds/tileableStars.png"),this.load.image("ship-pod","./assets/sprites/ship-pod.png")},e.prototype.create=function(){var t=this;this.add.tileSprite(0,0,10*this.cameras.main.width,10*this.cameras.main.height,"stars"),this.mouse=new s.Mouse(this),this.player=new a.ShipPod(this),r.Globals.player=this.player,this.player.setTarget(this.mouse);var e=new c.CannonAttachment(this);this.player.addAttachment(e),this.setupCamera(this.player),this.input.keyboard.on("keydown-P",(function(){r.Globals.paused=!0})),this.input.keyboard.on("keydown-R",(function(){r.Globals.paused=!1})),this.mouse.onWheelUp((function(e){var n=t.cameras.main.zoom-.5;n<.1&&(n=.1),t.cameras.main.zoomTo(n)})),this.mouse.onWheelDown((function(e){var n=t.cameras.main.zoom+.5;n>1&&(n=1),t.cameras.main.zoomTo(n)}))},e.prototype.update=function(){r.Globals.paused||r.Globals.player.update()},e.prototype.setupCamera=function(t){this.cameras.main.backgroundColor.setFromRGB({r:0,g:0,b:0}),this.cameras.main.setZoom(1),this.cameras.main.centerOn(0,0);var e=this.cameras.main.width,n=this.cameras.main.height,o=Math.floor(e/2),i=Math.floor(n/2),a=Math.floor(o/2),r=Math.floor(i/2);this.cameras.main.startFollow(t.getGameObject(),!0),this.cameras.main.deadzone=new Phaser.Geom.Rectangle(a,r,o,i)},e}(Phaser.Scene);e.ShipScene=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(9);var o=n(10),i=n(0),a=n(3),r=n(4),s=n(5),c=function(){function t(t){this.remainingFuel=100,this.temperature=0,this.active=!0,this.lastOverheatCheck=0,this.lastBoostTime=0,this.id=o.RNG.guid(),this.scene=t,this.gameObj=t.add.container(0,0),this.scene.physics.add.existing(this.gameObj),this.gameObj.body.bounce.setTo(.7,.7);var e=t.add.sprite(0,0,"ship-pod");this.gameObj.add(e),this.integrity=a.Constants.MAX_INTEGRITY,this.attachments=new Array(r.Helpers.enumLength(s.AttachmentLocation)),this.setupInputHandlers()}return t.prototype.update=function(){!i.Globals.paused&&this.active&&(this.lookAtTarget(),this.thrustKey.isDown&&this.thrustFowards(),this.boostKey.isDown&&this.boostForwards(),this.scene.input.activePointer.leftButtonDown()&&this.attachments[0]&&this.attachments[0].trigger(),this.checkOverheatCondition(),this.rotateAttachmentsClockwiseKey.isDown&&this.rotateAttachmentsClockwise(),this.rotateAttachmentsAntiClockwiseKey.isDown&&this.rotateAttachmentsAntiClockwise(),this.detachAttachmentKey.isDown&&this.removeAttachment(s.AttachmentLocation.front),this.updateAttachments())},t.prototype.updateAttachments=function(){for(var t=0;t<this.attachments.length;t++){var e=this.attachments[t];e&&e.update()}},t.prototype.setupInputHandlers=function(){this.thrustKey=this.scene.input.keyboard.addKey("SPACE",!0,!0),this.boostKey=this.scene.input.keyboard.addKey("TAB",!0,!1),this.rotateAttachmentsClockwiseKey=this.scene.input.keyboard.addKey("E",!0,!1),this.rotateAttachmentsAntiClockwiseKey=this.scene.input.keyboard.addKey("Q",!0,!1),this.detachAttachmentKey=this.scene.input.keyboard.addKey("X",!0,!1)},t.prototype.checkOverheatCondition=function(){if(!i.Globals.paused&&this.active&&r.Helpers.now()-this.lastOverheatCheck>a.Constants.OVERHEAT_CHECK_INTERVAL){if(this.temperature>a.Constants.MAX_TEMPERATURE&&this.destroy(),this.temperature>a.Constants.MAX_SAFE_TEMPERATURE){var t=(this.temperature-a.Constants.MAX_SAFE_TEMPERATURE)/a.Constants.MAX_SAFE_TEMPERATURE;this.sustainDamage(t)}this.applyCooling(a.Constants.COOLING_RATE),this.lastOverheatCheck=r.Helpers.now()}},t.prototype.getRealLocation=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.setTarget=function(t){this.target=t},t.prototype.lookAtTarget=function(){var t=this.target.getRealLocation(),e=Phaser.Math.Angle.Between(t.x,t.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(e)},t.prototype.getAngle=function(){return this.gameObj.angle},t.prototype.getRotation=function(){return this.gameObj.rotation},t.prototype.getHeading=function(){var t=Math.cos(this.gameObj.rotation),e=Math.sin(this.gameObj.rotation);return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.getVelocity=function(){return this.gameObj.body.velocity.length()},t.prototype.thrustFowards=function(){this.applyThrust(a.Constants.THRUSTER_FORCE,a.Constants.FUEL_PER_THRUST,a.Constants.HEAT_PER_THRUST)},t.prototype.boostForwards=function(){r.Helpers.now()-this.lastBoostTime>=a.Constants.BOOSTER_COOLDOWN_TIME&&(this.applyThrust(a.Constants.BOOSTER_FORCE,a.Constants.FUEL_PER_BOOST,a.Constants.HEAT_PER_BOOST),this.lastBoostTime=r.Helpers.now())},t.prototype.applyThrust=function(t,e,n){if(this.getRemainingFuel()>0){var o=this.getHeading().multiply(new Phaser.Math.Vector2(t,t));this.gameObj.body.velocity.add(o),this.reduceFuel(e),this.applyHeating(n)}},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.getTemperature=function(){return this.temperature},t.prototype.applyHeating=function(t){this.temperature+=t},t.prototype.applyCooling=function(t){this.temperature-=t,this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.addFuel=function(t){this.remainingFuel+=t,this.remainingFuel>a.Constants.MAX_FUEL&&(this.remainingFuel=a.Constants.MAX_FUEL)},t.prototype.getRemainingFuel=function(){return this.remainingFuel},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1,this.destroy())},t.prototype.repair=function(t){this.integrity=t,this.integrity>a.Constants.MAX_INTEGRITY&&(this.integrity=a.Constants.MAX_INTEGRITY)},t.prototype.rotateAttachmentsClockwise=function(){var t=this.attachments.pop();this.attachments.unshift(t),this.updateAttachmentPositions()},t.prototype.rotateAttachmentsAntiClockwise=function(){var t=this.attachments.shift();this.attachments.push(t),this.updateAttachmentPositions()},t.prototype.updateAttachmentPositions=function(){for(var t=0;t<this.attachments.length;t++)if(this.attachments[t])switch(t){case s.AttachmentLocation.front:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.front);break;case s.AttachmentLocation.frontRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontRight);break;case s.AttachmentLocation.right:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.right);break;case s.AttachmentLocation.backRight:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backRight);break;case s.AttachmentLocation.backLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.backLeft);break;case s.AttachmentLocation.left:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.left);break;case s.AttachmentLocation.frontLeft:this.attachments[t].setAttachmentLocation(s.AttachmentLocation.frontLeft)}},t.prototype.addAttachment=function(t){for(var e=!1,n=0;n<r.Helpers.enumLength(s.AttachmentLocation);n++)if(!this.attachments[n]){var o=void 0;switch(n){case s.AttachmentLocation.front:o=s.AttachmentLocation.front;break;case s.AttachmentLocation.frontRight:o=s.AttachmentLocation.frontRight;break;case s.AttachmentLocation.right:o=s.AttachmentLocation.right;break;case s.AttachmentLocation.backRight:o=s.AttachmentLocation.backRight;break;case s.AttachmentLocation.backLeft:o=s.AttachmentLocation.backLeft;break;case s.AttachmentLocation.left:o=s.AttachmentLocation.left;break;case s.AttachmentLocation.frontLeft:o=s.AttachmentLocation.frontLeft}this.attachments[n]=t,t.attach(this,o),e=!0}e||(this.attachments[s.AttachmentLocation.front].detach(),this.attachments[s.AttachmentLocation.front]=t,t.attach(this,s.AttachmentLocation.front)),this.gameObj.add(t.getGameObject())},t.prototype.removeAttachment=function(t){if(this.attachments[t]){var e=this.attachments[t].getGameObject();this.gameObj.remove(e),this.attachments[t].detach(),this.attachments[t]=null}},t.prototype.getAttachments=function(){return this.attachments},t.prototype.destroy=function(){},t}();e.ShipPod=c},function(e,n){e.exports=t},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(11);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,n){var o=n(12),i=n(13),a=i;a.v1=o,a.v4=i,t.exports=a},function(t,e,n){var o,i,a=n(1),r=n(2),s=0,c=0;t.exports=function(t,e,n){var h=e&&n||0,u=e||[],p=(t=t||{}).node||o,m=void 0!==t.clockseq?t.clockseq:i;if(null==p||null==m){var l=a();null==p&&(p=o=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==m&&(m=i=16383&(l[6]<<8|l[7]))}var f=void 0!==t.msecs?t.msecs:(new Date).getTime(),g=void 0!==t.nsecs?t.nsecs:c+1,y=f-s+(g-c)/1e4;if(y<0&&void 0===t.clockseq&&(m=m+1&16383),(y<0||f>s)&&void 0===t.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=f,c=g,i=m;var d=(1e4*(268435455&(f+=122192928e5))+g)%4294967296;u[h++]=d>>>24&255,u[h++]=d>>>16&255,u[h++]=d>>>8&255,u[h++]=255&d;var b=f/4294967296*1e4&268435455;u[h++]=b>>>8&255,u[h++]=255&b,u[h++]=b>>>24&15|16,u[h++]=b>>>16&255,u[h++]=m>>>8|128,u[h++]=255&m;for(var A=0;A<6;++A)u[h+A]=p[A];return e||r(u)}},function(t,e,n){var o=n(1),i=n(2);t.exports=function(t,e,n){var a=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var r=(t=t||{}).random||(t.rng||o)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e)for(var s=0;s<16;++s)e[a+s]=r[s];return e||i(r)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.scene=t,this.scene.input.mouse.capture=!0}return t.prototype.getAngle=function(){return this.scene.input.activePointer.getAngle()},t.prototype.getRotation=function(){return this.getAngle()*(Math.PI/180)},t.prototype.getHeading=function(){var t=this.getAngle(),e=Math.cos(t),n=Math.sin(t);return new Phaser.Math.Vector2(e,n).normalize().negate()},t.prototype.getVelocity=function(){return this.scene.input.activePointer.velocity.length()},t.prototype.getLocation=function(){return this.scene.input.activePointer.position.clone()},t.prototype.getRealLocation=function(){var t=this.getLocation();return this.scene.cameras.main.getWorldPoint(t.x,t.y)},t.prototype.onWheelUp=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,r){i>0&&t(i)}))},t.prototype.onWheelDown=function(t){this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL,(function(e,n,o,i,a,r){i<0&&t(-i)}))},t}();e.Mouse=o},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(16),r=n(0),s=n(4),c=n(17),h=function(t){function e(e){var n=t.call(this,e)||this;return n.maxAmmo=500,n.remainingAmmo=n.maxAmmo,n.cooldownTime=1e3,n.lastFiredAt=0,n.gameObj=n.scene.physics.add.sprite(0,0,"cannon"),n}return i(e,t),e.prototype.reload=function(t){this.remainingAmmo+=t,this.remainingAmmo>this.maxAmmo&&(this.remainingAmmo=this.maxAmmo)},e.prototype.getRemainingAmmo=function(){return this.remainingAmmo},e.prototype.update=function(){},e.prototype.trigger=function(){!r.Globals.paused&&this.active&&this.fire()},e.prototype.fire=function(t){if(!r.Globals.paused&&this.active&&this.getRemainingAmmo()>0&&s.Helpers.now()-this.lastFiredAt>this.cooldownTime){var e=this.getRealLocation();new c.Bullet(this.scene,{x:e.x,y:e.y,force:3e3,angle:this.getAngle()}),this.lastFiredAt=s.Helpers.now()}},e}(a.ShipAttachment);e.CannonAttachment=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),i=n(5),a=function(){function t(t){this.scene=t,this.active=!0,this.integrity=o.Constants.MAX_INTEGRITY}return t.prototype.attach=function(t,e){e||(e=i.AttachmentLocation.front),this.ship=t,this.setAttachmentLocation(e);var n=this.ship.getRealLocation();this.gameObj.setPosition(n.x,n.y),this.gameObj.setRotation(this.ship.getAngle());var o=this.getHeading();o.multiply(new Phaser.Math.Vector2(11,0));var a=this.getRealLocation();a.add(o),this.gameObj.setPosition(a.x,a.y)},t.prototype.detach=function(){this.ship=null,this.attachmentLocation=null},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getAngle=function(){var t=this.gameObj.angle;return this.ship&&(t+=this.ship.getAngle()),t},t.prototype.getRotation=function(){var t=this.gameObj.rotation;return this.ship&&(t+=this.ship.getRotation()),t},t.prototype.getHeading=function(){var t=Math.cos(this.getRotation()),e=Math.sin(this.getRotation());return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.getVelocity=function(){var t=this.gameObj.body.velocity.length();return this.ship&&(t+=this.ship.getVelocity()),t},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0),e=this.getRealLocation();return new Phaser.Math.Vector2(e.x-t.x,e.y-t.y)},t.prototype.getRealLocation=function(){var t=new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y);return this.ship&&t.add(this.ship.getRealLocation()),t},t.prototype.getIntegrity=function(){return this.integrity},t.prototype.sustainDamage=function(t){this.integrity-=t,this.integrity<=0&&(this.integrity=0,this.active=!1)},t.prototype.repair=function(t){this.integrity=t,this.integrity>o.Constants.MAX_INTEGRITY&&(this.integrity=o.Constants.MAX_INTEGRITY)},t.prototype.destroy=function(){this.active=!1,this.ship.removeAttachment(this.attachmentLocation)},t.prototype.setAttachmentLocation=function(t){this.attachmentLocation=t},t}();e.ShipAttachment=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=function(){function t(t,e){this.scene=t,this.force=e.force||0,this.gameObj=t.physics.add.sprite(e.x||0,e.y||0,"bullet"),this.gameObj.setAngle(e.angle||0),this.active=!0,this.addCollisionDetection(),this.setInMotion()}return t.prototype.addCollisionDetection=function(){for(var t=0;t<o.Globals.interactables.length;t++)this.scene.physics.add.collider(this.gameObj,o.Globals.interactables[t],this.onImpact)},t.prototype.onImpact=function(t,e){},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.getAngle=function(){return this.gameObj.angle},t.prototype.getRotation=function(){return this.gameObj.rotation},t.prototype.getHeading=function(){var t=Math.cos(this.gameObj.rotation),e=Math.sin(this.gameObj.rotation);return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.getVelocity=function(){return this.gameObj.body.velocity.length()},t.prototype.getLocation=function(){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getRealLocation=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.setInMotion=function(){var t=this.getHeading().multiply(new Phaser.Math.Vector2(this.force,this.force));this.gameObj.body.velocity.add(t)},t}();e.Bullet=i},function(t,e,n){"use strict";var o,i=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),r={active:!0,visible:!0,key:"OverlayScene"},s=function(t){function e(){return t.call(this,r)||this}return i(e,t),e.prototype.preload=function(){},e.prototype.create=function(){this.debug=this.add.text(10,10,"",{font:"16px Courier",fill:"#ffdddd"})},e.prototype.update=function(){if(!a.Globals.paused&&a.Globals.player){var t=a.Globals.player,e=t.getRealLocation();this.debug.setText(["Velocity: "+t.getVelocity().toFixed(1),"Integrity: "+t.getIntegrity().toFixed(1),"Heat: "+t.getTemperature().toFixed(1),"Fuel: "+t.getRemainingFuel().toFixed(1),"Location: "+e.x.toFixed(1)+","+e.y.toFixed(1)])}},e}(Phaser.Scene);e.OverlayScene=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,