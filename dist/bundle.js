!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("phaser")):"function"==typeof define&&define.amd?define(["phaser"],e):"object"==typeof exports?exports.bundle=e(require("phaser")):t.bundle=e(t.phaser)}(window,(function(t){return function(t){var e={};function r(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(o,n,function(e){return t[e]}.bind(null,n));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Globals||(e.Globals={})},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var o=new Uint8Array(16);t.exports=function(){return r(o),o}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},function(t,e){for(var r=[],o=0;o<256;++o)r[o]=(o+256).toString(16).substr(1);t.exports=function(t,e){var o=e||0,n=r;return[n[t[o++]],n[t[o++]],n[t[o++]],n[t[o++]],"-",n[t[o++]],n[t[o++]],"-",n[t[o++]],n[t[o++]],"-",n[t[o++]],n[t[o++]],"-",n[t[o++]],n[t[o++]],n[t[o++]],n[t[o++]],n[t[o++]],n[t[o++]]].join("")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=r(4),n=r(0),i={type:Phaser.AUTO,scale:{width:window.innerWidth,height:window.innerHeight},backgroundColor:"#000000",parent:"space-sim",physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}},scene:o.ShipScene};e.game=new Phaser.Game(i),window.addEventListener("resize",(function(){e.game.scale.refresh()})),n.Globals.game=e.game},function(t,e,r){"use strict";var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(5),a=r(0),s=r(11),u={active:!0,visible:!0,key:"GameScene"},c=function(t){function e(){return t.call(this,u)||this}return n(e,t),e.prototype.preload=function(){this.load.image("stellar-forge","./assets/backgrounds/StellarForgeClouds.jpg"),this.load.image("ship-pod","./assets/sprites/ship-pod.png")},e.prototype.create=function(){var t=this;this.add.image(0,0,"stellar-forge"),a.Globals.mouse||(a.Globals.mouse=new s.Mouse(this)),a.Globals.player=new i.ShipPod(this),this.setupCamera(),this.input.on("KEY_DOWN_P",(function(t){a.Globals.isPaused=!0})),this.input.on("KEY_DOWN_R",(function(){a.Globals.isPaused=!1})),this.input.on("wheel",(function(e,r,o,n,i,a){var s=t.cameras.main.zoom;if(n<0)(u=s+.5)>1&&(u=1),t.cameras.main.zoomTo(u);else if(n>0){var u;(u=s-.5)<.1&&(u=.1),t.cameras.main.zoomTo(u)}}))},e.prototype.update=function(){a.Globals.isPaused||a.Globals.player.update()},e.prototype.setupCamera=function(){this.cameras.main.setZoom(1),this.cameras.main.centerOn(0,0);var t=this.cameras.main.width,e=this.cameras.main.height,r=Math.floor(t/2),o=Math.floor(e/2),n=Math.floor(r/2),i=Math.floor(o/2);this.cameras.main.startFollow(a.Globals.player.getGameObject(),!0),this.cameras.main.deadzone=new Phaser.Geom.Rectangle(n,i,r,o)},e}(Phaser.Scene);e.ShipScene=c},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=r(6);r(10);var n=r(0),i=function(){function t(t){this.active=!0,this.fuelCapacity=100,this.remainingFuel=100,this.thrusterForce=1,this.thrusterFuelConsumption=.01,this.thrusterHeatGeneration=.5,this.rotationRate=.2,this.integrity=100,this.temperature=0,this.id=o.RNG.guid(),this.scene=t,this.gameObj=t.physics.add.sprite(0,0,"ship-pod"),this.inputKeys=t.input.keyboard.createCursorKeys(),this.setTarget(n.Globals.mouse)}return t.prototype.update=function(){this.lookAtTarget(),this.inputKeys.space.isDown&&this.thrustFowards(),this.applyCooling(),this.integrityCheck()},t.prototype.getRealPosition=function(){return new Phaser.Math.Vector2(this.gameObj.x,this.gameObj.y)},t.prototype.getPosition=function(){var t=this.scene.cameras.main.getWorldPoint(0,0);return new Phaser.Math.Vector2(this.gameObj.x-t.x,this.gameObj.y-t.y)},t.prototype.getId=function(){return this.id},t.prototype.getGameObject=function(){return this.gameObj},t.prototype.setTarget=function(t){this.target=t},t.prototype.lookAtTarget=function(){var t=this.target.getRealPosition(),e=Phaser.Math.Angle.Between(t.x,t.y,this.gameObj.x,this.gameObj.y);this.gameObj.setRotation(e)},t.prototype.getHeading=function(){var t=Math.cos(this.gameObj.rotation),e=Math.sin(this.gameObj.rotation);return new Phaser.Math.Vector2(t,e).normalize().negate()},t.prototype.thrustFowards=function(){if(this.remainingFuel>0){var t=this.getHeading().multiply(new Phaser.Math.Vector2(this.thrusterForce,this.thrusterForce));this.gameObj.body.velocity.add(t),this.reduceFuel(this.thrusterFuelConsumption),this.applyHeating(this.thrusterHeatGeneration)}},t.prototype.strafeLeft=function(){},t.prototype.strafeRight=function(){},t.prototype.thrustBackwards=function(){},t.prototype.applyHeating=function(t){if(this.temperature+=t,this.temperature>100){var e=this.temperature-100;this.integrity-=e}},t.prototype.applyCooling=function(){this.temperature>0&&(this.temperature-=.1),this.temperature<0&&(this.temperature=0)},t.prototype.reduceFuel=function(t){this.remainingFuel-=t,this.remainingFuel<0&&(this.remainingFuel=0)},t.prototype.integrityCheck=function(){this.integrity<=0&&(this.active=!1)},t}();e.ShipPod=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=r(7);!function(t){t.int=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.guid=function(){return o.v4()}}(e.RNG||(e.RNG={}))},function(t,e,r){var o=r(8),n=r(9),i=n;i.v1=o,i.v4=n,t.exports=i},function(t,e,r){var o,n,i=r(1),a=r(2),s=0,u=0;t.exports=function(t,e,r){var c=e&&r||0,p=e||[],h=(t=t||{}).node||o,l=void 0!==t.clockseq?t.clockseq:n;if(null==h||null==l){var f=i();null==h&&(h=o=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==l&&(l=n=16383&(f[6]<<8|f[7]))}var d=void 0!==t.msecs?t.msecs:(new Date).getTime(),y=void 0!==t.nsecs?t.nsecs:u+1,m=d-s+(y-u)/1e4;if(m<0&&void 0===t.clockseq&&(l=l+1&16383),(m<0||d>s)&&void 0===t.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=d,u=y,n=l;var g=(1e4*(268435455&(d+=122192928e5))+y)%4294967296;p[c++]=g>>>24&255,p[c++]=g>>>16&255,p[c++]=g>>>8&255,p[c++]=255&g;var v=d/4294967296*1e4&268435455;p[c++]=v>>>8&255,p[c++]=255&v,p[c++]=v>>>24&15|16,p[c++]=v>>>16&255,p[c++]=l>>>8|128,p[c++]=255&l;for(var b=0;b<6;++b)p[c+b]=h[b];return e||a(p)}},function(t,e,r){var o=r(1),n=r(2);t.exports=function(t,e,r){var i=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var a=(t=t||{}).random||(t.rng||o)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,e)for(var s=0;s<16;++s)e[i+s]=a[s];return e||n(a)}},function(e,r){e.exports=t},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){var e=this;this.scene=t,this.location=Phaser.Math.Vector2.ZERO,this.scene.input.on("pointermove",(function(t){e.location=new Phaser.Math.Vector2(t.x,t.y)}))}return t.prototype.getPosition=function(){return this.location.clone()},t.prototype.getRealPosition=function(){return this.scene.cameras.main.getWorldPoint(this.location.x,this.location.y)},t}();e.Mouse=o}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idW5kbGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2J1bmRsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9idW5kbGUvLi9zcmMvdXRpbGl0aWVzL2dsb2JhbHMudHMiLCJ3ZWJwYWNrOi8vYnVuZGxlLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwid2VicGFjazovL2J1bmRsZS8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qcyIsIndlYnBhY2s6Ly9idW5kbGUvLi9zcmMvZ2FtZS50cyIsIndlYnBhY2s6Ly9idW5kbGUvLi9zcmMvc2NlbmVzL3NoaXAtc2NlbmUudHMiLCJ3ZWJwYWNrOi8vYnVuZGxlLy4vc3JjL3NoaXBzL3NoaXAtcG9kLnRzIiwid2VicGFjazovL2J1bmRsZS8uL3NyYy91dGlsaXRpZXMvcm5nLnRzIiwid2VicGFjazovL2J1bmRsZS8uL25vZGVfbW9kdWxlcy91dWlkL2luZGV4LmpzIiwid2VicGFjazovL2J1bmRsZS8uL25vZGVfbW9kdWxlcy91dWlkL3YxLmpzIiwid2VicGFjazovL2J1bmRsZS8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovL2J1bmRsZS9leHRlcm5hbCBcInBoYXNlclwiIiwid2VicGFjazovL2J1bmRsZS8uL3NyYy91dGlsaXRpZXMvbW91c2UudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEwX18iLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiR2xvYmFscyIsImdldFJhbmRvbVZhbHVlcyIsImNyeXB0byIsIm1zQ3J5cHRvIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5kcyIsIkFycmF5IiwiTWF0aCIsInJhbmRvbSIsImJ5dGVUb0hleCIsInRvU3RyaW5nIiwic3Vic3RyIiwiYnVmIiwib2Zmc2V0IiwiYnRoIiwiam9pbiIsImdhbWVDb25maWciLCJ0eXBlIiwiUGhhc2VyIiwiQVVUTyIsInNjYWxlIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYXJlbnQiLCJwaHlzaWNzIiwiZGVmYXVsdCIsImFyY2FkZSIsImdyYXZpdHkiLCJ4IiwieSIsInNjZW5lIiwiU2hpcFNjZW5lIiwiZ2FtZSIsIkdhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVmcmVzaCIsInNjZW5lQ29uZmlnIiwiYWN0aXZlIiwidmlzaWJsZSIsInByZWxvYWQiLCJ0aGlzIiwibG9hZCIsImltYWdlIiwiYWRkIiwibW91c2UiLCJNb3VzZSIsInBsYXllciIsIlNoaXBQb2QiLCJzZXR1cENhbWVyYSIsImlucHV0Iiwib24iLCJldmVudCIsImlzUGF1c2VkIiwicG9pbnRlciIsImN1cnJlbnRseU92ZXIiLCJkeCIsImR5IiwiZHoiLCJjdXJyZW50Wm9vbSIsImNhbWVyYXMiLCJtYWluIiwiem9vbSIsIm5ld1pvb20iLCJ6b29tVG8iLCJ1cGRhdGUiLCJzZXRab29tIiwiY2VudGVyT24iLCJkeldpZHRoIiwiZmxvb3IiLCJkekhlaWdodCIsImR6WCIsImR6WSIsInN0YXJ0Rm9sbG93IiwiZ2V0R2FtZU9iamVjdCIsImRlYWR6b25lIiwiR2VvbSIsIlJlY3RhbmdsZSIsIlNjZW5lIiwiZnVlbENhcGFjaXR5IiwicmVtYWluaW5nRnVlbCIsInRocnVzdGVyRm9yY2UiLCJ0aHJ1c3RlckZ1ZWxDb25zdW1wdGlvbiIsInRocnVzdGVySGVhdEdlbmVyYXRpb24iLCJyb3RhdGlvblJhdGUiLCJpbnRlZ3JpdHkiLCJ0ZW1wZXJhdHVyZSIsImlkIiwiUk5HIiwiZ3VpZCIsImdhbWVPYmoiLCJzcHJpdGUiLCJpbnB1dEtleXMiLCJrZXlib2FyZCIsImNyZWF0ZUN1cnNvcktleXMiLCJzZXRUYXJnZXQiLCJsb29rQXRUYXJnZXQiLCJzcGFjZSIsImlzRG93biIsInRocnVzdEZvd2FyZHMiLCJhcHBseUNvb2xpbmciLCJpbnRlZ3JpdHlDaGVjayIsImdldFJlYWxQb3NpdGlvbiIsIlZlY3RvcjIiLCJnZXRQb3NpdGlvbiIsImNhbWVyYVBvcyIsImdldFdvcmxkUG9pbnQiLCJnZXRJZCIsInRhcmdldCIsInBvcyIsInJhZGlhbnMiLCJBbmdsZSIsIkJldHdlZW4iLCJzZXRSb3RhdGlvbiIsImdldEhlYWRpbmciLCJjb3MiLCJyb3RhdGlvbiIsInNpbiIsIm5vcm1hbGl6ZSIsIm5lZ2F0ZSIsImRlbHRhViIsIm11bHRpcGx5IiwiYm9keSIsInZlbG9jaXR5IiwicmVkdWNlRnVlbCIsImFwcGx5SGVhdGluZyIsInN0cmFmZUxlZnQiLCJzdHJhZmVSaWdodCIsInRocnVzdEJhY2t3YXJkcyIsImRlZ3JlZXMiLCJkZWx0YSIsImFtb3VudCIsImludCIsIm1pbiIsIm1heCIsInY0IiwidjEiLCJ1dWlkIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsInJuZyIsImJ5dGVzVG9VdWlkIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJvcHRpb25zIiwiYiIsIm5vZGUiLCJjbG9ja3NlcSIsInVuZGVmaW5lZCIsInNlZWRCeXRlcyIsIm1zZWNzIiwiRGF0ZSIsImdldFRpbWUiLCJuc2VjcyIsImR0IiwiRXJyb3IiLCJ0bCIs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R0FDaEMsRUFBS3lHLFNBQVcsSUFBSS9JLE9BQU9YLEtBQUtrRyxRQUFRakQsRUFBUXpCLEVBQUd5QixFQUFReEIsTUFzQnZFLE9BYkksWUFBQTBFLFlBQUEsV0FFSSxPQUFPL0QsS0FBS3NILFNBQVNFLFNBTXpCLFlBQUEzRCxnQkFBQSxXQUdJLE9BRmlDN0QsS0FBS1YsTUFBTTZCLFFBQVFDLEtBQUs2QyxjQUFjakUsS0FBS3NILFNBQVNsSSxFQUFHWSxLQUFLc0gsU0FBU2pJLElBSTlHLEVBOUJBLEdBQWEsRUFBQWdCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInBoYXNlclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJwaGFzZXJcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYnVuZGxlXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicGhhc2VyXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJidW5kbGVcIl0gPSBmYWN0b3J5KHJvb3RbXCJwaGFzZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xMF9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwiaW1wb3J0IHsgU2hpcFBvZCB9IGZyb20gXCIuLi9zaGlwcy9zaGlwLXBvZFwiO1xyXG5pbXBvcnQgeyBNb3VzZSB9IGZyb20gXCIuL21vdXNlXCI7XHJcblxyXG5leHBvcnQgbW9kdWxlIEdsb2JhbHMge1xyXG4gICAgZXhwb3J0IHZhciBpc1BhdXNlZDogYm9vbGVhbjtcclxuICAgIGV4cG9ydCB2YXIgcGxheWVyOiBTaGlwUG9kO1xyXG4gICAgZXhwb3J0IHZhciBtb3VzZTogTW91c2U7XHJcbiAgICBleHBvcnQgdmFyIGdhbWU6IFBoYXNlci5HYW1lO1xyXG59IiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiIsIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xudmFyIGJ5dGVUb0hleCA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXhbaV0gPSAoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvVXVpZChidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IG9mZnNldCB8fCAwO1xuICB2YXIgYnRoID0gYnl0ZVRvSGV4O1xuICAvLyBqb2luIHVzZWQgdG8gZml4IG1lbW9yeSBpc3N1ZSBjYXVzZWQgYnkgY29uY2F0ZW5hdGlvbjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzE3NSNjNFxuICByZXR1cm4gKFtcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXVxuICBdKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsImltcG9ydCB7IFNoaXBTY2VuZSB9IGZyb20gXCIuL3NjZW5lcy9zaGlwLXNjZW5lXCI7XHJcbmltcG9ydCB7IEdsb2JhbHMgfSBmcm9tIFwiLi91dGlsaXRpZXMvZ2xvYmFsc1wiO1xyXG5cclxuY29uc3QgZ2FtZUNvbmZpZzogUGhhc2VyLlR5cGVzLkNvcmUuR2FtZUNvbmZpZyA9IHtcclxuICAgIHR5cGU6IFBoYXNlci5BVVRPLFxyXG4gICAgc2NhbGU6IHtcclxuICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIH0sXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDAwMDAwJyxcclxuICAgIHBhcmVudDogJ3NwYWNlLXNpbScsXHJcbiAgICBwaHlzaWNzOiB7XHJcbiAgICAgICAgZGVmYXVsdDogJ2FyY2FkZScsXHJcbiAgICAgICAgYXJjYWRlOiB7XHJcbiAgICAgICAgICAgIGdyYXZpdHk6IHsgeDogMCwgeTogMCB9LFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzY2VuZTogU2hpcFNjZW5lXHJcbn07XHJcbmV4cG9ydCBjb25zdCBnYW1lOiBQaGFzZXIuR2FtZSA9IG5ldyBQaGFzZXIuR2FtZShnYW1lQ29uZmlnKTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICBnYW1lLnNjYWxlLnJlZnJlc2goKTtcclxufSk7XHJcblxyXG5HbG9iYWxzLmdhbWUgPSBnYW1lOyIsImltcG9ydCB7IFNoaXBQb2QgfSBmcm9tIFwiLi4vc2hpcHMvc2hpcC1wb2RcIjtcclxuaW1wb3J0IHsgR2xvYmFscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBNb3VzZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbW91c2VcIjtcclxuXHJcbmNvbnN0IHNjZW5lQ29uZmlnOiBQaGFzZXIuVHlwZXMuU2NlbmVzLlNldHRpbmdzQ29uZmlnID0ge1xyXG4gICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgIGtleTogJ0dhbWVTY2VuZSdcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaGlwU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoc2NlbmVDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwcmVsb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZSgnc3RlbGxhci1mb3JnZScsICcuL2Fzc2V0cy9iYWNrZ3JvdW5kcy9TdGVsbGFyRm9yZ2VDbG91ZHMuanBnJyk7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdzaGlwLXBvZCcsICcuL2Fzc2V0cy9zcHJpdGVzL3NoaXAtcG9kLnBuZycpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhpcy5jYW1lcmFzLm1haW4uc2V0Qm91bmRzKDAsIDAsIDI2NjYsIDI2MjEpO1xyXG4gICAgICAgIC8vIHRoaXMucGh5c2ljcy53b3JsZC5zZXRCb3VuZHMoMCwgMCwgMjY2NiwgMjYyMSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkLmltYWdlKDAsIDAsICdzdGVsbGFyLWZvcmdlJyk7XHJcblxyXG4gICAgICAgIGlmICghR2xvYmFscy5tb3VzZSkge1xyXG4gICAgICAgICAgICBHbG9iYWxzLm1vdXNlID0gbmV3IE1vdXNlKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBHbG9iYWxzLnBsYXllciA9IG5ldyBTaGlwUG9kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHVwQ2FtZXJhKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5pbnB1dC5vbignS0VZX0RPV05fUCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBHbG9iYWxzLmlzUGF1c2VkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmlucHV0Lm9uKCdLRVlfRE9XTl9SJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBHbG9iYWxzLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5vbignd2hlZWwnLCAocG9pbnRlciwgY3VycmVudGx5T3ZlciwgZHgsIGR5LCBkeiwgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRab29tOiBudW1iZXIgPSB0aGlzLmNhbWVyYXMubWFpbi56b29tO1xyXG4gICAgICAgICAgICBpZiAoZHkgPCAwKSB7IC8vIHNjcm9sbGVkIGRvd25cclxuICAgICAgICAgICAgICAgIC8vIHpvb20gaW5cclxuICAgICAgICAgICAgICAgIGxldCBuZXdab29tOiBudW1iZXIgPSBjdXJyZW50Wm9vbSArIDAuNTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdab29tID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1pvb20gPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYHpvb21pbmcgZnJvbSAke2N1cnJlbnRab29tfSB0byAke25ld1pvb219YCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYXMubWFpbi56b29tVG8obmV3Wm9vbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7IC8vIHNjcm9sbGVkIHVwXHJcbiAgICAgICAgICAgICAgICAvLyB6b29tIG91dFxyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1pvb206IG51bWJlciA9IGN1cnJlbnRab29tIC0gMC41O1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1pvb20gPCAwLjEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdab29tID0gMC4xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYHpvb21pbmcgZnJvbSAke2N1cnJlbnRab29tfSB0byAke25ld1pvb219YCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYXMubWFpbi56b29tVG8obmV3Wm9vbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghR2xvYmFscy5pc1BhdXNlZCkge1xyXG4gICAgICAgICAgICBHbG9iYWxzLnBsYXllci51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXR1cENhbWVyYSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbWVyYXMubWFpbi5zZXRab29tKDEpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhcy5tYWluLmNlbnRlck9uKDAsIDApO1xyXG5cclxuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHRoaXMuY2FtZXJhcy5tYWluLndpZHRoO1xyXG4gICAgICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuY2FtZXJhcy5tYWluLmhlaWdodDtcclxuICAgICAgICBsZXQgZHpXaWR0aDogbnVtYmVyID0gTWF0aC5mbG9vcih3aWR0aCAvIDIpO1xyXG4gICAgICAgIGxldCBkekhlaWdodDogbnVtYmVyID0gTWF0aC5mbG9vcihoZWlnaHQgLyAyKTtcclxuICAgICAgICBsZXQgZHpYOiBudW1iZXIgPSBNYXRoLmZsb29yKGR6V2lkdGggLyAyKTtcclxuICAgICAgICBsZXQgZHpZOiBudW1iZXIgPSBNYXRoLmZsb29yKGR6SGVpZ2h0IC8gMik7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFzLm1haW4uc3RhcnRGb2xsb3coR2xvYmFscy5wbGF5ZXIuZ2V0R2FtZU9iamVjdCgpLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmNhbWVyYXMubWFpbi5kZWFkem9uZSA9IG5ldyBQaGFzZXIuR2VvbS5SZWN0YW5nbGUoZHpYLCBkelksIGR6V2lkdGgsIGR6SGVpZ2h0KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFJORyB9IGZyb20gXCIuLi91dGlsaXRpZXMvcm5nXCI7XHJcbmltcG9ydCBcInBoYXNlclwiO1xyXG5pbXBvcnQgeyBVcGRhdGFibGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy91cGRhdGFibGVcIjtcclxuaW1wb3J0IHsgQ2FuVGFyZ2V0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY2FuLXRhcmdldFwiO1xyXG5pbXBvcnQgeyBDYW5UaHJ1c3QgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jYW4tdGhydXN0XCI7XHJcbmltcG9ydCB7IEhhc0xvY2F0aW9uIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaGFzLWxvY2F0aW9uXCI7XHJcbmltcG9ydCB7IE1vdXNlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9tb3VzZVwiO1xyXG5pbXBvcnQgeyBIYXNHYW1lT2JqZWN0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaGFzLWdhbWUtb2JqZWN0XCI7XHJcbmltcG9ydCB7IEdsb2JhbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dsb2JhbHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaGlwUG9kIGltcGxlbWVudHMgVXBkYXRhYmxlLCBDYW5UYXJnZXQsIENhblRocnVzdCwgSGFzTG9jYXRpb24sIEhhc0dhbWVPYmplY3Qge1xyXG4gICAgcHJpdmF0ZSBpZDogc3RyaW5nOyAvLyBVVUlEXHJcbiAgICBwcml2YXRlIHNjZW5lOiBQaGFzZXIuU2NlbmU7XHJcbiAgICBwcml2YXRlIGdhbWVPYmo6IFBoYXNlci5QaHlzaWNzLkFyY2FkZS5TcHJpdGU7XHJcbiAgICBwcml2YXRlIHRhcmdldDogSGFzTG9jYXRpb247XHJcbiAgICBwcml2YXRlIGlucHV0S2V5czogUGhhc2VyLlR5cGVzLklucHV0LktleWJvYXJkLkN1cnNvcktleXM7XHJcblxyXG4gICAgYWN0aXZlOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIFxyXG4gICAgZnVlbENhcGFjaXR5OiBudW1iZXIgPSAxMDA7XHJcbiAgICByZW1haW5pbmdGdWVsOiBudW1iZXIgPSAxMDA7XHJcbiAgICBcclxuICAgIHRocnVzdGVyRm9yY2U6IG51bWJlciA9IDE7IC8vIEtpbG9OZXd0b25zXHJcbiAgICB0aHJ1c3RlckZ1ZWxDb25zdW1wdGlvbjogbnVtYmVyID0gMC4wMTtcclxuICAgIHRocnVzdGVySGVhdEdlbmVyYXRpb246IG51bWJlciA9IDAuNTtcclxuXHJcbiAgICByb3RhdGlvblJhdGU6IG51bWJlciA9IDAuMjsgLy8gZGVncmVlcyBwZXIgc2Vjb25kXHJcbiAgICBpbnRlZ3JpdHk6IG51bWJlciA9IDEwMDsgLy8gbWF4aW11bSBvZiAxMDBcclxuICAgIHRlbXBlcmF0dXJlOiBudW1iZXIgPSAwOyAvLyBpbiBDZWxjaXVzXHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6IFBoYXNlci5TY2VuZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBSTkcuZ3VpZCgpO1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcclxuICAgICAgICB0aGlzLmdhbWVPYmogPSBzY2VuZS5waHlzaWNzLmFkZC5zcHJpdGUoMCwgMCwgJ3NoaXAtcG9kJyk7XHJcbiAgICAgICAgdGhpcy5pbnB1dEtleXMgPSBzY2VuZS5pbnB1dC5rZXlib2FyZC5jcmVhdGVDdXJzb3JLZXlzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VGFyZ2V0KEdsb2JhbHMubW91c2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxvb2tBdFRhcmdldCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmlucHV0S2V5cy5zcGFjZS5pc0Rvd24pIHtcclxuICAgICAgICAgICAgdGhpcy50aHJ1c3RGb3dhcmRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXBwbHlDb29saW5nKCk7XHJcbiAgICAgICAgdGhpcy5pbnRlZ3JpdHlDaGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVE9ETzogbmVlZGVkIHNvIHdlIGNhbiB1c2UgRmxvYXRpbmcgT3JpZ2luXHJcbiAgICAgKi9cclxuICAgIGdldFJlYWxQb3NpdGlvbigpOiBQaGFzZXIuTWF0aC5WZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBoYXNlci5NYXRoLlZlY3RvcjIodGhpcy5nYW1lT2JqLngsIHRoaXMuZ2FtZU9iai55KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHRoZSBsb2NhdGlvbiB3aXRoaW4gdGhlIHZpZXdhYmxlIGFyZWFcclxuICAgICAqIEByZXR1cm5zIGEge1BoYXNlci5NYXRoLlZlY3RvcjJ9IG9mZnNldCBmb3IgbG9jYXRpb24gd2l0aGluIGN1cnJlbnQgXHJcbiAgICAgKiB2aWV3YWJsZSBhcmVhXHJcbiAgICAgKi9cclxuICAgIGdldFBvc2l0aW9uKCk6IFBoYXNlci5NYXRoLlZlY3RvcjIge1xyXG4gICAgICAgIGxldCBjYW1lcmFQb3M6IFBoYXNlci5NYXRoLlZlY3RvcjIgPSB0aGlzLnNjZW5lLmNhbWVyYXMubWFpbi5nZXRXb3JsZFBvaW50KDAsIDApO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGhhc2VyLk1hdGguVmVjdG9yMih0aGlzLmdhbWVPYmoueCAtIGNhbWVyYVBvcy54LCB0aGlzLmdhbWVPYmoueSAtIGNhbWVyYVBvcy55KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdhbWVPYmplY3QoKTogUGhhc2VyLkdhbWVPYmplY3RzLkdhbWVPYmplY3Qge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdhbWVPYmo7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFyZ2V0KHRhcmdldDogSGFzTG9jYXRpb24pIHtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICBsb29rQXRUYXJnZXQoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMudGFyZ2V0LmdldFJlYWxQb3NpdGlvbigpO1xyXG4gICAgICAgIGxldCByYWRpYW5zOiBudW1iZXIgPSBQaGFzZXIuTWF0aC5BbmdsZS5CZXR3ZWVuKHBvcy54LCBwb3MueSwgdGhpcy5nYW1lT2JqLngsIHRoaXMuZ2FtZU9iai55KTtcclxuICAgICAgICB0aGlzLmdhbWVPYmouc2V0Um90YXRpb24ocmFkaWFucyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVhZGluZygpOiBQaGFzZXIuTWF0aC5WZWN0b3IyIHtcclxuICAgICAgICBsZXQgeDogbnVtYmVyID0gTWF0aC5jb3ModGhpcy5nYW1lT2JqLnJvdGF0aW9uKTtcclxuICAgICAgICBsZXQgeTogbnVtYmVyID0gTWF0aC5zaW4odGhpcy5nYW1lT2JqLnJvdGF0aW9uKTtcclxuICAgICAgICByZXR1cm4gbmV3IFBoYXNlci5NYXRoLlZlY3RvcjIoeCwgeSkubm9ybWFsaXplKCkubmVnYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhydXN0Rm93YXJkcygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5yZW1haW5pbmdGdWVsID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgaGVhZGluZzogUGhhc2VyLk1hdGguVmVjdG9yMiA9IHRoaXMuZ2V0SGVhZGluZygpO1xyXG4gICAgICAgICAgICBsZXQgZGVsdGFWOiBQaGFzZXIuTWF0aC5WZWN0b3IyID0gaGVhZGluZy5tdWx0aXBseShuZXcgUGhhc2VyLk1hdGguVmVjdG9yMih0aGlzLnRocnVzdGVyRm9yY2UsIHRoaXMudGhydXN0ZXJGb3JjZSkpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVPYmouYm9keS52ZWxvY2l0eS5hZGQoZGVsdGFWKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVkdWNlRnVlbCh0aGlzLnRocnVzdGVyRnVlbENvbnN1bXB0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseUhlYXRpbmcodGhpcy50aHJ1c3RlckhlYXRHZW5lcmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RyYWZlTGVmdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RyYWZlUmlnaHQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRocnVzdEJhY2t3YXJkcygpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlIZWF0aW5nKGRlZ3JlZXM6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGVtcGVyYXR1cmUgKz0gZGVncmVlcztcclxuICAgICAgICBpZiAodGhpcy50ZW1wZXJhdHVyZSA+IDEwMCkge1xyXG4gICAgICAgICAgICAvLyByZWR1Y2UgaW50ZWdyaXR5IGJhc2VkIG9uIGRlZ3JlZXMgb3ZlciAxMDBcclxuICAgICAgICAgICAgbGV0IGRlbHRhOiBudW1iZXIgPSB0aGlzLnRlbXBlcmF0dXJlIC0gMTAwO1xyXG4gICAgICAgICAgICB0aGlzLmludGVncml0eSAtPSBkZWx0YTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlDb29saW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnRlbXBlcmF0dXJlID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBlcmF0dXJlIC09IDAuMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudGVtcGVyYXR1cmUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcGVyYXR1cmUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZWR1Y2VGdWVsKGFtb3VudDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW1haW5pbmdGdWVsIC09IGFtb3VudDtcclxuICAgICAgICBpZiAodGhpcy5yZW1haW5pbmdGdWVsIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbWFpbmluZ0Z1ZWwgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbnRlZ3JpdHlDaGVjaygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pbnRlZ3JpdHkgPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBkZXN0cm95IHNoaXAgYW5kIGVuZCBnYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdjQgfSBmcm9tIFwidXVpZFwiO1xyXG5cclxuZXhwb3J0IG1vZHVsZSBSTkcge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGludChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBndWlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHY0KCk7XHJcbiAgICB9XHJcbn0iLCJ2YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7XG52YXIgdjQgPSByZXF1aXJlKCcuL3Y0Jyk7XG5cbnZhciB1dWlkID0gdjQ7XG51dWlkLnYxID0gdjE7XG51dWlkLnY0ID0gdjQ7XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDtcbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBbXTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTtcblxuICAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IHJuZygpO1xuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbXG4gICAgICAgIHNlZWRCeXRlc1swXSB8IDB4MDEsXG4gICAgICAgIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXG4gICAgICBdO1xuICAgIH1cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH1cblxuICAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cbiAgdmFyIG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gIC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcbiAgdmFyIG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxO1xuXG4gIC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcbiAgdmFyIGR0ID0gKG1zZWNzIC0gX2xhc3RNU2VjcykgKyAobnNlY3MgLSBfbGFzdE5TZWNzKS8xMDAwMDtcblxuICAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG4gIGlmIChkdCA8IDAgJiYgb3B0aW9ucy5jbG9ja3NlcSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7XG4gIH1cblxuICAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9XG5cbiAgLy8gUGVyIDQuMi4xLjIgVGhyb3cgZXJyb3IgaWYgdG9vIG1hbnkgdXVpZHMgYXJlIHJlcXVlc3RlZFxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3V1aWQudjEoKTogQ2FuXFwndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWMnKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTtcblxuICAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7XG5cbiAgLy8gYHRpbWVfbG93YFxuICB2YXIgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7XG4gIGJbaSsrXSA9IHRsID4+PiAyNCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiAxNiAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdGwgJiAweGZmO1xuXG4gIC8vIGB0aW1lX21pZGBcbiAgdmFyIHRtaCA9IChtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDApICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmO1xuXG4gIC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7XG5cbiAgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDtcblxuICAvLyBgY2xvY2tfc2VxX2xvd2BcbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmO1xuXG4gIC8vIGBub2RlYFxuICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgPyBidWYgOiBieXRlc1RvVXVpZChiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2MTtcbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEwX187IiwiaW1wb3J0IHsgSGFzTG9jYXRpb24gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9oYXMtbG9jYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNb3VzZSBpbXBsZW1lbnRzIEhhc0xvY2F0aW9uIHtcclxuICAgIHByaXZhdGUgc2NlbmU6IFBoYXNlci5TY2VuZTtcclxuICAgIHByaXZhdGUgbG9jYXRpb246IFBoYXNlci5NYXRoLlZlY3RvcjI7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lOiBQaGFzZXIuU2NlbmUpIHtcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IFBoYXNlci5NYXRoLlZlY3RvcjIuWkVSTztcclxuICAgICAgICB0aGlzLnNjZW5lLmlucHV0Lm9uKCdwb2ludGVybW92ZScsIChwb2ludGVyOiBQaGFzZXIuTWF0aC5WZWN0b3IyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSBuZXcgUGhhc2VyLk1hdGguVmVjdG9yMihwb2ludGVyLngsIHBvaW50ZXIueSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgbW91c2Ugd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIGN1cnJlbnRcclxuICAgICAqIHNjcmVlbi5cclxuICAgICAqIEByZXR1cm5zIGEge1BoYXNlci5NYXRoLlZlY3RvcjJ9IGNsb25lIG9mIHRoZSBwb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBnZXRQb3NpdGlvbigpOiBQaGFzZXIuTWF0aC5WZWN0b3IyIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhgbW91c2UgbG9jYXRpb246ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5sb2NhdGlvbil9YCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24uY2xvbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG9mZnNldHMgdGhlIHNjcmVlbiBwb3NpdGlvbiBiYXNlZCBvbiBjYW1lcmEgcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgZ2V0UmVhbFBvc2l0aW9uKCk6IFBoYXNlci5NYXRoLlZlY3RvcjIge1xyXG4gICAgICAgIGxldCB3b3JsZDogUGhhc2VyLk1hdGguVmVjdG9yMiA9IHRoaXMuc2NlbmUuY2FtZXJhcy5tYWluLmdldFdvcmxkUG9pbnQodGhpcy5sb2NhdGlvbi54LCB0aGlzLmxvY2F0aW9uLnkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBtb3VzZSBSRUFMIGxvY2F0aW9uOiAke0pTT04uc3RyaW5naWZ5KHdvcmxkKX1gKTtcclxuICAgICAgICByZXR1cm4gd29ybGQ7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9